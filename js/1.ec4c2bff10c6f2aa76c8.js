(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{43:function(e,r,a){"use strict";var n=a(0),o=a.n(n),s=a(49),t=a(7),i=a(2),l=a.n(i),c=function(e){var r=e.title,a=e.description,i=e.image,l=document.location.href,c=Object(n.useContext)(t.a);return o.a.createElement(s.a,null,r&&o.a.createElement("title",null,r),r&&o.a.createElement("meta",{property:"og:title",content:r}),r&&o.a.createElement("meta",{name:"twitter:title",content:r}),a&&o.a.createElement("meta",{name:"description",content:a}),a&&o.a.createElement("meta",{property:"og:description",content:a}),a&&o.a.createElement("meta",{name:"twitter:description",content:a}),i&&o.a.createElement("meta",{property:"og:image",content:i}),i&&o.a.createElement("meta",{name:"twitter:image",content:i}),o.a.createElement("meta",{property:"og:url",content:l}),o.a.createElement("meta",{property:"og:type",content:"website"}),o.a.createElement("meta",{name:"twitter:card",content:"summary"}),o.a.createElement("meta",{name:"twitter:creator",content:"@madera_marco"}),o.a.createElement("meta",{name:"twitter:site",content:"@madera_marco"}),!0===c?o.a.createElement("meta",{name:"theme-color",content:"#000000"}):o.a.createElement("meta",{name:"theme-color",content:"#ffffff"}))};c.propTypes={title:l.a.string,description:l.a.string,image:l.a.string},r.a=c},45:function(e,r,a){e.exports=a(3)(25)},50:function(e,r,a){e.exports=a(3)(11)},73:function(e,r,a){"use strict";a.d(r,"a",(function(){return n}));var n=[{id:1,title:"Números Pseudo Aleatorios",author:"Marco Madera",cover:{original:"https://res.cloudinary.com/marcomadera/image/upload/v1595270596/Blog/1/pseudoRandomNumbers_todtwy.jpg",w120:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,h_120,w_120/v1595270596/Blog/1/pseudoRandomNumbers_todtwy.jpg",w300:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_300/v1595270596/Blog/1/pseudoRandomNumbers_todtwy.jpg",w760:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_760/v1595270596/Blog/1/pseudoRandomNumbers_todtwy.jpg"},coverDescription:"Tres dados",excerpt:"Los números pseudo-aleatorios son creados a partir de algoritmos matemáticos, por lo que no se puede decir que son realmente aleatorios",date:new Date("May 20 2020"),tags:["Estadística","Matemáticas"],src:null},{id:2,title:"Ligaduras tipográficas",author:"Marco Madera",cover:{original:"https://res.cloudinary.com/marcomadera/image/upload/v1595269475/Blog/2/LigadurasTipograficasLogo_b90rgi.png",w120:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,h_120,w_120/v1595269475/Blog/2/LigadurasTipograficasLogo_b90rgi.png",w300:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_300/v1595269475/Blog/2/LigadurasTipograficasLogo_b90rgi.png",w760:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_760/v1595269475/Blog/2/LigadurasTipograficasLogo_b90rgi.png"},coverDescription:"Mano que sostiene un lápiz de madera y borra en una hoja",excerpt:"Las ligaduras tipográficas son símbolos especiales que se producen por la unión de múltiples caracteres",date:new Date("Jun 08 2020"),tags:["Personalización"],src:'# Ligaduras tipográficas\r\nLas ligaduras tipográficas son símbolos especiales que se producen por la unión de múltiples caracteres.\r\n\r\nEn la música se aplica este concepto, las ligaduras son los símbolos que conectan las notas y hacen que se ejecuten como una sola nota prolongada, también ayudan en la legibilidad en el pentagrama.  \r\n\r\n![Ligadura musical 100px](https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_167/v1595269483/Blog/2/2ed8a62bb1bd2f4eaeaaaa1be3be8e1e_bbofoo.jpg "Ligadura Musical") \r\n&nbsp;\r\n\r\n## Ligaduras estándar\r\nEstas son ligaduras para mejorar la legibilidad del texto, entre las más comunes están las combinaciones \'ff\' y \'fi\', un ejemplo de esto está presente en el logotipo de microsoft office donde ligan ambas \'f\' para evitar el espacio que quedaría de no hacerlo.\r\n\r\n![Ligadura estandar](https://res.cloudinary.com/marcomadera/image/upload/v1595269485/Blog/2/VkW3Q2D_nenmzd.jpg "Ligadura estándar")  \r\n\r\n&nbsp;\r\n## Ligaduras Discrecionales\r\nEstás ligaduras son más estéticas, tienen el propósito de lucir bien, entrelazan los caracteres para que tengan un mejor diseño.\r\n\r\n![Ligadura](https://res.cloudinary.com/marcomadera/image/upload/v1595269485/Blog/2/a9c32vc23bb56fdb4_apqjua.gif "Ligadura discrecional") &nbsp;\r\n\r\n## Ligaduras históricas\r\n![Notacion tironiana ajustar derecha 200px](https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_210/v1595269484/Blog/2/2af6de62vb43bnnc4_ou6z52.jpg "Notas tironianas")\r\nLas ligaduras históricas son las que ya no se usan comúnmente. Estas ligaduras fueron originalmente creadas para reducir el tiempo de escritura, cuando Cicerón recitaba sus discursos, su esclavo, Tirón, los escribía para dejar constancia documentada, para escribir rápido no despegaba la mano uniendo algunas letras dando paso a las notas tironianas, que fueron muy populares y por lo que después se le atribuyó la invención de la taquigrafía. \r\n\r\n![Ampersand ajustar izquierda 50px](https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_125/v1595269482/Blog/2/2b32bcc21v1b32vb_k6ikwo.png "Ampersand")\r\nUna de las ligaduras más famosas y utilizados actualmente de este sistema es el ampersand, el símbolo formado por los caracteres \'e\' y \'t\' que en español significa \'y\'.\r\n\r\nEn el alfabeto árabe los caracteres no tienen una forma fija, sino que cada letra se escribe con variantes diferentes según su entorno lo que denota su envejecimiento al idioma arameo natabea. ![Ligaduras arabes 50px](https://res.cloudinary.com/marcomadera/image/upload/v1595269484/Blog/2/921mmn32n266n54n3b4_bheewg.gif "Ligaduras Arabes")   &nbsp;\r\n\t\r\n------------\r\n\r\n## Ligaduras en la programación\r\nEn programación se utilizan muchos operadores con caracteres separados que unidos tienen un significado, como por ejemplo \'>=\', mi mente por un instante tiene que procesar ambos caracteres por separado "mayor o igual" y si bien gran parte de la programación se trata de leer y entender el código, las ligaduras podrían ayudar a captarlo más rápido y hacer que nuestro código sea más agradable a la vista.\r\n\r\nAlgunas fuentes con ligaduras de programación gratuitas que puedes descargar:\r\n* <a href="https://github.com/tonsky/FiraCode" target="_blank" rel="noopener noreferrer">Fira Code</a>\r\n* <a href="https://github.com/larsenwork/monoid" target="_blank" rel="noopener noreferrer">MonoId</a>\r\n* <a href="https://github.com/i-tu/Hasklig" target="_blank" rel="noopener noreferrer">Hasklig</a>\r\n* <a href="https://github.com/be5invis/Iosevka" target="_blank" rel="noopener noreferrer">Iosevka</a> \r\n&nbsp;\r\n\r\n\r\nDescarga e instala la fuente que desees como cualquier otra fuente.\r\n\r\n#### Habilita las ligaduras en tu editor\r\nLa gran mayoría de editores permiten el uso de ligaduras.  \r\nPara activar las ligaduras en Visual Studio Code dirígete a (File > Preferences > User Settings) en la sección del editor de texto, fuentes y editar settings.json\r\n\t\r\n![Vs Code Settings](https://res.cloudinary.com/marcomadera/image/upload/v1595269485/Blog/2/hZhhlKS_cdxsaq.jpg "Vs Code Settings")\r\n\r\nEn settings.json agrega lo siguiente en el caso de Fira Code.\r\n\r\n```json\r\n{\r\n  "editor.fontFamily": "\'Fira Code\'",\r\n  "editor.fontLigatures": true,\r\n}\r\n  ```\r\n\r\nGuardas los cambios y listo, eso es todo, ya puedes usar la fuente seleccionada, si no es el caso probablemente sea necesario reiniciar el editor.\r\n\r\n![Ligaduras Vs Code](https://res.cloudinary.com/marcomadera/image/upload/v1595269490/Blog/2/iz550n2_m69hok.gif "Ligaduras Vs Code")\r\n\r\n------------\r\n\r\n## Opinión\r\nLas ligaduras no son un estándar en la programación, por lo que no todos las usarán, acostumbrarse a verlas puede que llegue a jugar en contra el ver el código de otras personas, a la inversa puede generar confusión ya que los lenguajes de programación son diferentes, si bien (<=) menor o igual puede escribirse en ese orden en un lenguaje, en otro puede escribirse de otra forma (=<), lo que no generaría una ligadura. Las ligaduras no son algo esencial como lo son en la música, ni te permiten escribir más rápido, en programación al final solo es visual, terminas escribiendo lo mismo, lo suyo está en probar y elegir si es para tí, anteriormente las use muy poco tiempo como para acostumbrarme y ahora les daré otra oportunidad.'},{id:3,title:"Accesibilidad Web",author:"Marco Madera",cover:{original:"https://res.cloudinary.com/marcomadera/image/upload/v1595294653/Blog/3/eb23bvc1b3748b34b-434b-4b343_t00lbk.jpg",w120:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,h_120,w_120/v1595294653/Blog/3/eb23bvc1b3748b34b-434b-4b343_t00lbk.jpg",w300:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_300/v1595294653/Blog/3/eb23bvc1b3748b34b-434b-4b343_t00lbk.jpg",w760:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_760/v1595294653/Blog/3/eb23bvc1b3748b34b-434b-4b343_t00lbk.jpg"},coverDescription:"Imagen de computador",excerpt:"Las pautas de accesibilidad para el contenido para la web son recomendaciones para crear contenido web más accesible",date:new Date("Jul 20 2020"),tags:["Accesibilidad","Web"],src:'# Accesibilidad Web\r\nSegun el <a href="https://www.who.int/disabilities/world_report/2011/accessible_es.pdf" target="_blank" rel="noopener  noreferrer">Informe mundial sobre la discapacidad</a> publicado en el año 2011 estima que más de mil millones de personas viven con algún tipo de discapacidad; alrededor del 15% de la población mundial.\r\n\r\nLa accesibilidad web es la práctica continua de asegurarnos que todo lo que creamos para la web se puede usar, interpretar y operar por una variedad de personas en una variedad de situaciones.\r\n\r\n<a href="https://www.w3.org/TR/2008/REC-WCAG20-20081211/" target="_blank" rel="noopener noreferrer">Web Content Accessibility Guidelines</a> creadas por W3C son recomendaciones para crear contenido web más accesible, las cuales también han sido ratificadas por la ISO, como estándar ISO/IEC 40500:2012.\r\n\r\n&nbsp;\r\n\r\n## ¿Por qué implementar accesibilidad?\r\nUna declaración de accesibilidad demuestra compromiso y proporciona detalles a los usuarios con discapacidades sobre las implementaciones que pueden usar y mejorar su experiencia en el sitio web.\r\n\r\n* Puede aumentar el SEO de nuestro sitio web\r\n* Para incluir a personas en situaciones de discapacidad.\r\n* Para mejorar la usabilidad de nuestros proyectos.\r\n* Porque en algunos paises es la ley.\r\n\r\n&nbsp;\r\n\r\n\r\n## Principios WCAG\r\n\r\n1. <a href="https://www.w3.org/TR/WCAG21/#perceivable" target="_blank" rel="noopener  noreferrer">Perceptible</a>: Crear alternativas textuales para todo contenido no textual, facilitar a los usuarios ver y oír el contenido, poder presentar el contenido de diferentes formas sin perder información o estructura.\r\n\r\n2. <a href="https://www.w3.org/TR/WCAG21/#operable" target="_blank" rel="noopener  noreferrer">Operable</a>: Que toda la funcionalidad esté disponible desde el teclado, que sea navegable, dar el tiempo suficiente para leer en elementos dinamicos y dar opciones de tiempo.\r\n\r\n3. <a href="https://www.w3.org/TR/WCAG21/#understandable" target="_blank" rel="noopener  noreferrer">Comprensible</a>: Ser legible, tamaños contrastes de textos, hacer la página predecible, tener instrucciones claras.\r\n\r\n4. <a href="https://www.w3.org/TR/WCAG21/#robust" target="_blank" rel="noopener  noreferrer">Robusto</a>: Mantener compatibilidad con las aplicaciones de usuario actuales y futuras, navegadores y dispositivos, incluyendo las tecnologías asistivas y tener un buen performance.\r\n\r\nLos criterios de WCAG comprenden 3 niveles de conformidad:\r\n* A el nivel más bajo.\r\n* AA requiere cumplir los criterios del nivel A y AA\r\n* AAA el nivel más alto requiere cumplir los criterios del nivel AA y AAA.\r\n\r\n&nbsp;\r\n\r\n## Tecnologías asistivas\r\nLas tecnologías asistivas sirven de ayuda para las personas con dificultades para realizar tareas regulares con el objetivo de mejorar su calidad de vida y su integración. Algunas de estas son:\r\n\r\n- Lectores de pantalla\r\n- Extensiones que manipulan el css\r\n- Lupa de pantalla\r\n- Control de voz\r\n- Varilla bucal\r\n\r\n&nbsp;&nbsp;\r\n\r\n## HTML Semántico\r\n\r\nUn buen HTML resuelve mucho de la accesibilidad con el uso correcto de tags y atributos. Usar HTML semántico ayudará al navegador a incluir significado en el árbol de accesibilidad para que los lectores de pantalla puedan entender el rol, propiedades y estado que tiene esa parte de nuestro código.\r\n\r\n![Chrome Accesibility](https://res.cloudinary.com/marcomadera/image/upload/v1595398073/Blog/3/ebc46-f396nv-vbccd_hltpf5.png "Chrome Accesibility") \r\n\r\n##### No recomendado:\r\n```HTML\r\n<body>\r\n  <div></div>\r\n  <div>\r\n  </div>\r\n  <div></div>\r\n</body>\r\n```\r\n&nbsp;\r\n\r\n##### Recomendado:\r\n```HTML\r\n<body>\r\n  <header></header>\r\n  <main>\r\n  </main>\r\n  <footer></footer>\r\n</body>\r\n```\r\n&nbsp;&nbsp;\r\n\r\n#### Uso de texto alternativo en imagenes\r\nEsto le ayuda a los lectores de pantalla al momento de toparse con imagenes a leer la descripción.\r\n```HTML\r\n<img src ="img src" alt="description">\r\n```\r\n\r\n&nbsp;\r\n\r\n#### Uso de scope en tablas\r\nEl uso del scope ayuda a los lectores de pantalla a seguir el orden correcto.\r\n```HTML\r\n <table border="1">\r\n  <caption>Contact Information</caption>\r\n  <tr>\r\n    <td></td>\r\n    <th scope="col">Name</th>\r\n    <th scope="col">City</th>\r\n  </tr>\r\n  <tr>\r\n    <td>1.</td>\r\n    <th scope="row">Joel Garner</th>\r\n    <td>Pittsburgh</td>\r\n  </tr>\r\n  <tr>\r\n    <td>2.</td>\r\n    <th scope="row">Clive Lloyd</th>\r\n    <td>Baltimore</td>\r\n  </tr>\r\n</table>\r\n```\r\n\r\n&nbsp;\r\n\r\n\r\n### Roles apropiados\r\n\r\nLos siguientes elementos tienen la apariencia de botón pero con roles direfentes:\r\n\r\n<style>\r\n  .blog3__container{\r\n    position: relative;\r\n  }\r\n  .share-box div:nth-of-type(5) span:nth-of-type(2) span:nth-of-type(1){\r\n    display: block;\r\n    width: 1px;\r\n    height: 3px;\r\n    background: green;\r\n    transform: rotate(-45deg) translate(-2px, 7px);\r\n  }\r\n  .share-box div:nth-of-type(5) span:nth-of-type(2) span:nth-of-type(2){\r\n    display: block;\r\n    width: 1px;\r\n    height: 8px;\r\n    border-radius: 0;\r\n    background: green;\r\n    transform: rotate(35deg) translate(5px, -4px);\r\n  }\r\n  \r\n  .share-box{\r\n  position: absolute;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  background-color: #fff;\r\n  border-radius: 6px;\r\n  top: -135px;\r\n  visibility: hidden;\r\n  padding: 10px;\r\n  box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.30);\r\n  }\r\n\r\n  .share-box div{\r\n    font-size: 13px;\r\n    align-items:center;\r\n  }\r\n\r\n  .share-box div:nth-of-type(1){\r\n    display:grid;\r\n    grid-template-columns: 1fr auto;\r\n    margin-bottom: 15px;\r\n  }\r\n  .share-box div:nth-of-type(2){\r\n    display:grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    margin-bottom: 8px;\r\n  }\r\n  .share-box div:nth-of-type(3){\r\n    display:grid;\r\n    grid-template-columns: 1fr auto;\r\n    margin-bottom: 6px;\r\n  }\r\n  .share-box div:nth-of-type(4){\r\n    display:grid;\r\n    grid-template-columns: 1fr auto;\r\n    margin-bottom: 6px;\r\n  }\r\n  .share-box div:nth-of-type(5){\r\n    display:grid;\r\n    grid-template-columns: 1fr auto;\r\n  }\r\n\r\n  .share-box div span{\r\n    line-height:1;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: fit-content;\r\n    font-family: consolas;\r\n    color: rgb(179,179,179);\r\n  }\r\n\r\n  .share-box div:nth-of-type(1) span:nth-of-type(1){\r\n    color: rgb(136,18,128);\r\n    font-size: 13px;\r\n  }\r\n  .share-box div:nth-of-type(1) span:nth-of-type(2){\r\n    font-size: 13px;\r\n  }\r\n  .share-box div:nth-of-type(2) span:nth-of-type(1){\r\n    color: rgb(108,114,120);\r\n    font-size: 11px;\r\n  }\r\n  .share-box div:nth-of-type(2) span:nth-of-type(2){\r\n    display: block;\r\n    width: 100%;\r\n    height: 1px;\r\n    background: rgb(221,221,221);\r\n  }\r\n  .share-box div:nth-of-type(3) span:nth-of-type(2){\r\n    color: rgb(108,114,120);\r\n  }\r\n  .share-box div:nth-of-type(4) span:nth-of-type(2){\r\n    color: rgb(108,114,120);\r\n  }\r\n\r\n  .share-box div:nth-of-type(5)>span:nth-of-type(2){\r\n    width: 14px;\r\n    height: 14px;\r\n    border-radius: 50%;\r\n    border: 1px solid green;\r\n  }\r\n\r\n  .triangle-down{\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 10px solid transparent;\r\n    border-right: 10px solid transparent;\r\n    border-top: 10px solid #fff;\r\n    position: absolute;\r\n    bottom: -11px;\r\n    left: 20%;\r\n  }\r\n\r\n  #butons:hover + .share-box{\r\n    visibility: visible;\r\n    left: 106.5px;\r\n  }\r\n  #anchor:hover + .share-box{\r\n    visibility: visible;\r\n  }\r\n</style>\r\n\r\n\r\n<div class="blog3__container">\r\n<a href="#anchor" class="btn btn-primary" id="anchor" >ancla</a><div class="share-box">\r\n  <div>\r\n  <span>anchor</span>\r\n  <span>104.25 x 38</span>\r\n  </div>\r\n  <div>\r\n  <span>ACCESIBILITY</span>\r\n  <span></span>\r\n  </div>\r\n  <div>\r\n  <span>Name</span>\r\n  <span>ancla</span>\r\n  </div>\r\n  <div>\r\n  <span>Role</span>\r\n  <span>link</span>\r\n  </div>\r\n  <div>\r\n  <span>Keyboard-focusable</span>\r\n  <span><span></span><span></span></span>\r\n  </div>\r\n  <div class="triangle-down"></div>\r\n</div>\r\n<button type="button" class="btn btn-primary" id="butons">botón</button><div class="share-box">\r\n  <div>\r\n  <span>button</span>\r\n  <span>106.5 x 38</span>\r\n  </div>\r\n  <div>\r\n  <span>ACCESIBILITY</span>\r\n  <span></span>\r\n  </div>\r\n  <div>\r\n  <span>Name</span>\r\n  <span>botón</span>\r\n  </div>\r\n  <div>\r\n  <span>Role</span>\r\n  <span>button</span>\r\n  </div>\r\n  <div>\r\n  <span>Keyboard-focusable</span>\r\n  <span><span></span><span></span></span>\r\n  </div>\r\n  <div class="triangle-down"></div>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\nHay que definir los roles de acuerdo a la función que realizarán. En este caso el primer "botón" tiene la funcionalidad de link a otra página por lo que debería ser implementado como hipervínculo para que tome el rol de link.\r\n\r\n\r\n\r\n### Atributos Aria\r\nEstos atributos se pueden añadir a cualquier etiqueta HTML para comunicar cambios especiales al DOM de nuestra aplicación. Roles propiedades y estados. Siempre es preferible usar un elemento HTML semántico correcto si es que existe en lugar de usar ARIA.\r\n\r\n- Roles: Define el tipo general del objeto .Comunican a los navegadores cuales son las interacciones que debería esperar y cómo se va a usar este objeto en nuestro proyecto. Se usan en situaciones muy especificas, es mejor depender del HTML semántico para comunicar los roles. Atributo: "role"\r\n&nbsp;\r\n\r\n- Propiedades: Comunican atributos que son esenciales para el comportamiento o significado de un elemento pero que suelen comunicar visualmente. Atributo: “aria-label”\r\n\r\n- Estado: Comunican estados y cambios de estados en elementos que se suelen comunicar visualmente aria-hidden=“true” para que el lector de pantalla solo lea los elementos visibles en el estado actual de la página.\r\n\r\n## Estilos\r\nPara tener más empatía con las personas con discapacidades visuales podemos emular a través de las devtools de Google Chrome a través de las siguientes opciones: \r\n\r\nCustomize and control DevTools > More tools > Rendering > Emulate vision deficiencies\r\n\r\n![Emulate Vision](https://res.cloudinary.com/marcomadera/image/upload/v1595570280/Blog/3/b3dsba-fbdbf-dasb2_kidwp6.png "Emulate Vision")\r\n\r\n\r\n#### Color y contraste\r\nPodemos utilizar las herramietas de Google Chrome DevTools para ver el contraste con el background y ver si cumplen con las especificaciones AA y AAA.\r\n\r\n![Contrast tool](https://res.cloudinary.com/marcomadera/image/upload/v1595547652/Blog/3/ecds-ecevsb-dbdbe-cbvxz_hqjyvo.png "Contrast tool")\r\n\r\n#### Focus\r\nEl enfoque da una guia visual al usuario sobre los elementos interactivos. Si un usuario solo navega con el teclado (tab y shift+tab) es importante que todos los elementos interactivos tengan un enfoque para guiar al usuario.\r\n<style>\r\n\r\n  #inputToFocus:focus{\r\n  box-shadow: 0 0 5px rgba(0, 123, 255, 1);\r\n  padding: 3px 0px 3px 3px;\r\n  margin: 5px 1px 3px 0px;\r\n  outline: 1px solid rgba(0, 123, 255, 1);\r\n  }\r\n</style>\r\n<input type="text" id="inputToFocus" size="25" placeholder="Seleccioname para enforcarme"/>\r\n\r\n&nbsp;&nbsp;\r\n\r\n#### Skip Links\r\nEs una <a href="https://www.w3.org/TR/WCAG20-TECHS/G1.html" target="_blank" rel="noopener  noreferrer">técnica</a> que permite navegar directamente al contenido principal, donde el primer elemento de la página sería este enlace. Con esto se logra que con cada cambio de página al navegar con el teclado no tener que pasar de nuevo por contenido repetitivo.\r\n\r\n```HTML\r\n<style>\r\n  .skip-link {\r\n  display: block;\r\n  line-height: 0;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n\r\n.skip-link:focus,\r\n.skip-link:active {\r\n  height: auto;\r\n  width: auto;\r\n}\r\n</style>\r\n<a href="#main" className="skip-link">Saltar al contenido</a>\r\n<nav>\r\n  <a href="/">Home</a>\r\n  <a href="/about">About</a>\r\n</nav>\r\n<main id="main"></main>\r\n```\r\n\r\n\r\n---\r\n\r\n### Tabindex\r\nEs un atributo que indica si un elemento puede ser enfocado, y si participa en la navegación secuencial del teclado, acepta tres valores:\r\n\r\nValor negativo(-1): El elemento debe ser enfocado, pero no debe de ser accesible a través de la navegación, puede ser usado en carousels donde elementos no son visibles.\r\n\r\nValor positivo (>0): Debe poder ser enfocado y su orden relativo es definido por el valor del atributo.\r\n\r\nValor de 0: Debe ser enfocado y ser accesible a través de la navegación secuencial del teclado, sigue el orden de la estructura del HTML.\r\n\r\n----\r\n\r\n## Añadir acciones con el teclado\r\nPodemos añadir acciones con el teclado escuchando las teclas. <a href="http://keycode.info/" target="_blank" rel="noopener noreferrer">Guia de códigos</a>\r\n\r\nExisten teclas intuitivas como por ejemplo al entrar en modales y salir con la tecla ESC, lo que añade una característica más a nuestro sitio.\r\n\r\n```javascript\r\nconst listenKeys= (e) => {\r\n  switch (e.keyCode) {\r\n    case 32: \r\n      togglePlay();\r\n      break;\r\n    case 77: \r\n      mute();\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\ndocument.body.addEventListener("keyup", e=> listenKeys(e));\r\n```\r\n\r\n&nbsp;\r\n\r\n## Test de accesibilidad\r\nLos test de accesibilidad ayudan a resolver problemas comunes, se pueden hacer a través de devtools con lighthouse o a través de otras plataformas.\r\n\r\n- <a href="https://github.com/dequelabs/axe-core" target="_blank" rel="noopener noreferrer">Axe core</a>\r\n\r\n- <a href="https://github.com/GoogleChrome/lighthouse" target="_blank" rel="noopener noreferrer">Lighthouse</a>\r\n\r\n- <a href="https://github.com/avanslaars/cypress-axe" target="_blank" rel="noopener noreferrer">Cypress axe</a>\r\n\r\n\r\n\r\n\r\n----\r\n\r\n## Conclusiones\r\nLa accesibilidad mejora la calidad de nuestro sitio web y la experiencia de los usuarios, es importante tener en mente la accesibilidad a la hora de estar desarrollando un sitio  web para asegurarnos que todos puedan tener acceso al contenido.\r\n\r\n\r\n'},{id:4,title:"RSS",author:"Marco Madera",cover:{original:"https://res.cloudinary.com/marcomadera/image/upload/v1597944129/Blog/4/RSS_znjs6w.png",w120:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,h_120,w_120/v1597944129/Blog/4/RSS_znjs6w.png",w300:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_300/v1597944129/Blog/4/RSS_znjs6w.png",w760:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_760/v1597944129/Blog/4/RSS_znjs6w.png"},coverDescription:"RSS",excerpt:"RSS es un formato para acceder a las actualizaciones de un sitio ya sea de noticias, blog, podcasts o de alguna otra característica",date:new Date("Aug 20 2020"),tags:["Web"],src:"# RSS\r\n\r\n![RSS ajustar derecha](https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_120/v1597944129/Blog/4/RSS_znjs6w.png)\r\nAlgo que siempre veía en los sitios era el icono típico de RSS, nunca le presté importancia hasta ahora que lo estoy implementando en el sitio. Cuando miraba una página con él, me daba la sensación de que no estaba actualizada o que usaba tecnologías del pasado, porque realmente el icono luce antiguo y nunca me di la tarea de entender que significada ni para qué servía; y aquí estoy ahora implementandolo.\r\n\r\n## ¿Qué es RSS?\r\nRSS es un formato para acceder a las actualizaciones de un sitio ya sea de noticias, blog, podcasts o de alguna otra característica, de esta forma los usuarios se pueden suscribir al feed y dar seguimiento al sitio sin la necesidad de tener que visitarlo para ver si ocurrió una actualización.\r\n\r\nPero que maravilla! ya no tendré mi buzón lleno de newsletter a los que me he suscrito durante mucho tiempo y he omitido desuscribirme.\r\n\r\n## ¿Cómo subscribirse?\r\nPrimero lo que se necesita es que la página deseada tenga implementada la funcionalidad de que se actualice, lo cual no es el caso de muchos sitios, se puede buscar en la propia página algún **enlace** con el nombre de RSS, Feed, o el distinguible icono. Una vez localizado el enlace puede que te subscriba directamente si tienes un lector, si no es el caso, copias el enlace y lo pegas en el **lector de RSS**. Existe una gran cantidad de lectores, de los lectores online que más me llamaron la atención fueron estos: \r\n* [Feed Reader](https://feedreader.com/)\r\n* [Feedly](https://feedly.com/)\r\n* [Inoreader](https://www.inoreader.com/)\r\n\r\n![Subscription Feedly](https://res.cloudinary.com/marcomadera/image/upload/v1597948860/Blog/4/subscription-feedly_cen18m.png)\r\n&nbsp; &nbsp;👆 En este caso solo necesité de la dirección del sitio para que lo detectará automáticamente.\r\n\r\n&nbsp;\r\n\r\n![Feedly presentación](https://res.cloudinary.com/marcomadera/image/upload/v1597947959/Blog/4/ejemplo-rss-feedly_lyldsf.png)\r\nVista de revista, puedes marcar los que ya has leído para que te aparezcan los últimos, guardarlos para leerlos después y muchas otras funcionalidades que te proporciona esta herramienta.\r\n\r\n&nbsp;\r\n\r\n![Modo lectura Feedreader](https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_780/v1597947960/Blog/4/ejemplo-rss-feedreader-lectura_wpqjz2.png)\r\nAhora con Feedreader en modo lectura\r\n\r\n----\r\n\r\n## Ventajas\r\n- Te ahorra el tiempo de visitar las páginas\r\n- Tu decides a que sitios subscribirte \r\n- No necesitas registrarte a ningún sitio\r\n- Te puedes desuscribir fácilmente\r\n\r\n## Desventajas\r\n- No es muy común su uso, los usuarios pueden preferir recibir emails a tener que ir a un lector\r\n- No hay un feedback del usuario\r\n- Algunos elementos pueden que no se muestren correctamente a lo esperado\r\n\r\n## Extracto\r\nEl sitio ya tiene RSS! si te subscribes a él puede que no veas algunos elementos correctamente, ya que puede depender del lector si soporta estilos dentro o no, pero de igual forma puedes dar click al enlace para que te direccione a la página del blog y verlo de la forma esperada. Te recuerdo que también existe la opción de recibir emails a través del Newsletter si no te agrada esta forma de recibir actualizaciones.\r\n\r\n## Conclusión\r\nRSS es una gran herramienta para el blog como alternativa al newsletter, para quienes lo prefieran usar, aún así yo no me veo usando la funcionalidad, se me hace mucho más cómodo que me llegue un email aún teniendo una cantidad considerable de subscripciones a tener que entrar a un lector a revisar las actualizaciones."},{id:5,title:"HTML Semántico",author:"Marco Madera",cover:{original:"https://res.cloudinary.com/marcomadera/image/upload/v1599325340/Blog/5/abbc-ebeeb-cbba_vm8uju.png",w120:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,h_120,w_120/v1599325340/Blog/5/abbc-ebeeb-cbba_vm8uju.png",w300:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_300/v1599325340/Blog/5/abbc-ebeeb-cbba_vm8uju.png",w760:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_760/v1599325340/Blog/5/abbc-ebeeb-cbba_vm8uju.png"},coverDescription:"HTML Tags",excerpt:"HTML Semántico es el uso de HTML, pero con etiquetas, atributos y valores coherentes al contenido y estructura de nuestras páginas para que tengan un mayor significado",date:new Date("Sep 08 2020"),tags:["HTML","Accesibilidad","Web"],src:'# HTML Semántico\r\n\r\nEsta semana estuvo rondando por mi cabeza un comentario que no sé si entendí del todo bien, lo lei en twitter sobre que debemos crear páginas web que sean leídas por humanos, no para robots, citando a google además, no pude encontrar la referencia, pero estoy  seguro que ya lo había leído en pasadas ocasiones. Considerando los siguientes bloques de código esto aplica?\r\n\r\n\r\n<div style="display: block;\r\n    font-size: 2rem;\r\n    font-weight: 500;\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n    margin-block-start: 0.83em;\r\n    margin-block-end: 0.83em;\r\n    margin-inline-start: 0px;\r\n    margin-inline-end: 0px;\r\n    font-family: var(--general-font-family);">¿Esto es un título?</div>\r\n\r\n\r\n<h2>¿Esto es un título?</h2>\r\n\r\nEsto luce exactamente igual, pero cómo sabemos si un robot lo lee igual?\r\nAlgo sencillo de hacer es abrir el lector de pantalla con <kbd>Cmd</kbd> + <kbd>F5</kbd> en Mac o con <kbd>ctrl</kbd> + <kbd>win</kbd> + <kbd>enter</kbd> en Windows y escuchar como lo lee. \r\n\r\n## ¿Qué es HTML Semántico?\r\n<p><dfn id="-que-es-html-semantico-">HTML Semántico</dfn> es el uso de <abbr title="Hyper Text Markup Language">HTML</abbr>, pero con etiquetas, atributos y valores coherentes al contenido y estructura de nuestras páginas para que tengan un mayor significado.</p>\r\n\r\nEl uso de estas etiquetas permiten a los procesadores de HTML, usar nuestro contenido en otros contextos, por ejemplo, si una persona quiere cambiar el color de todos los parrafos a rojo, o un motor de búsqueda que quiera recolectar solo el título de nuestra página para mostrarlo.\r\n\r\n-------\r\n\r\n## Ventajas\r\n- Es importante para el SEO, los motores de búsqueda pueden encontrar la información más relevante para poder posicionar mejor el sitio.\r\n- Es usado para [accesibilidad web](https://marcomadera.com/blog/accesibilidad-web/#html-semantico)\r\n- Es fácil de entender sin esfuerzo desde la estructura al contenido, por motivos de trabajo tengo que usar una web desactualizada en internet explorer 8 casi a diario y es horrible tener que encontrar elementos entre divs y tablas.\r\n\r\n-----\r\n\r\n## Estructura\r\n\r\n<style>.section {\r\n    display: grid;\r\n    grid-template: 50px 70px 300px 70px / 1fr 2fr;\r\n    gap: 15px 15px;\r\n    height: fit-content;\r\n    border-radius: 10px;\r\n  }\r\n  .header {\r\n    background: #eddfa9;\r\n    grid-area: 2 / 1 / 3 / 3;\r\n    border-radius: 10px;\r\n    \r\n  }\r\n  .nav {\r\n    background: #edcfa9;\r\n    grid-area: 1 / 1 / 2 / 3;\r\n    border-radius: 10px;\r\n  }\r\n  .aside {\r\n    grid-area: 3 / 1 / 4 / 2;\r\n    background: #e89f71;\r\n    border-radius: 10px;\r\n  }\r\n  .main {\r\n    grid-area: 3 / 2 / 4 / 3;\r\n    background: #d57149;\r\n    min-height: auto;\r\n    position: relative;\r\n    border-radius: 10px;\r\n  }\r\n  .footer {\r\n    grid-area: 4 / 1 / 5 / 3;\r\n    background: #aa4a30;\r\n    border-radius: 10px;\r\n  }\r\n  .article{\r\n    padding: 10px;\r\n    margin: 10px;\r\n    background: #d5d149;\r\n    border-radius: 10px;\r\n  }\r\n  .article_header{\r\n    display: block !important;\r\n    background: #eddfa9;\r\n    margin-bottom: 10px;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n  }\r\n  .article_p{\r\n    margin: 0;\r\n  }\r\n  .article_section{\r\n    background: #daa149;\r\n    margin-bottom: 10px;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n  }\r\n  .article_title{\r\n    margin: 0;\r\n  }\r\n  .article_footer{\r\n    background: #aa4a30;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n  }\r\n  .main_section{\r\n    background: #dfa149;\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: calc(100% - 20px);\r\n    margin: 10px;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n  }</style>\r\n\r\n<section class="section">\r\n  <nav class="nav">\r\n    <p>< Nav ></p>\r\n  </nav>\r\n  <header class="header">\r\n    <p>< Header ></p>\r\n  </header>\r\n  <aside class="aside"><p>< Aside ></p></aside>\r\n  <main class="main">\r\n    <article class="article">\r\n      <header class="article_header">\r\n        <p class="article_p">< Header ></p>\r\n      </header>\r\n      <section class="article_section">\r\n        <h3 class="article_title">< Section ></h3>\r\n        <p class="article_p">Texto</p>\r\n      </section>\r\n      <footer class="article_footer">&copy; < Footer ></footer>\r\n    </article>\r\n    <section class="main_section">\r\n      <h3 class="article_title">< Section ></h3>\r\n      <p class="article_p">Texto</p>\r\n    </section>\r\n  </main>\r\n  <footer class="footer">< Footer ></footer>\r\n</section>\r\n\r\n```HTML\r\n<body>\r\n  <nav><nav>\r\n  <header></header>\r\n  <aside></aside>\r\n  <main>\r\n    <article>\r\n      <header></header>\r\n      <section>\r\n        <h1></h1>\r\n        <p></p>\r\n      </section>\r\n      <footer></footer>\r\n    </article>\r\n    <section>\r\n        <h1></h1>\r\n        <p></p>\r\n    </section>\r\n  </main>\r\n  <footer></footer>\r\n</body>\r\n\r\n\x3c!-- No necesariamente tiene que seguir esta estructura --\x3e\r\n```\r\n\r\n### main\r\nEsta etiqueta señala al contenido principal de la página, solo puede existir una etiqueta de este tipo visible por página \r\n### section\r\nRepresenta a un contenido genérico en un documento donde no es similar a otro elemento\r\n### nav\r\nEs la etiqueta diseñada para identificar los enlaces de navegación, puede haber varías secciones de navegación en una página, no todos los enlaces necesitan de ir dentro de una etiqueta nav\r\n### article\r\nSe usa esta etiqueta cuando hay contenido repetitivo e independiente, puede tener también header footer y section.\r\n### aside\r\nEsta es una etiqueta que designa un área en la cual hay información suplementaria al contenido principal\r\n### header\r\nAgrupa la introducción de la página.\r\n### footer\r\nEl pie de página suele ser usado para añadir información extra sobre la página, el autor, copyright, avisos legales navegación, etc.\r\n\r\n\r\n-----\r\n\r\n### Títulos de cabecera\r\nEstos van desde el rango h1 a h6, donde el h1 es el más importante y deben de ir en orden descendente en cada secuencia, usualmente el user-agent de los navegadores los estilan h1 como el más grande de tamaño.\r\n\r\nSe espera tener contenido después de un título, poner varios títulos seguidos existe la etiqueta `<hgroup>` que indica un grupo de títulos.\r\n\r\n<hgroup><h1>h1</h1><h6>h6</h6></hgroup>\r\n\r\n```HTML\r\n</hgroup>\r\n  <h1>h1</h1>\r\n  <h6>h6</h6>\r\n</hgroup>\r\n```\r\n\r\n### address\r\nComo su nombre lo dice, se usa para información de contacto.\r\n\r\n<address>\r\nEscrito por <a href="mailto:ejemplo@ejemplo.com">Nombre</a>.<br>\r\nVisitanos en:<br>\r\nEjemplo.com<br>\r\nDirección<br>\r\n</address>\r\n\r\n```HTML\r\n<address>\r\nEscrito por <a href="mailto:ejemplo@ejemplo.com">Nombre</a>.<br>\r\nVisitanos en:<br>\r\nEjemplo.com<br>\r\nDirección<br>\r\n</address>\r\n```\r\n\r\n## Modificadores de texto\r\n\r\n### Énfasís\r\n\r\n<em>Esto es énfasis</em>\r\n\r\n```HTML\r\n<p>\r\n  <em>Esto es énfasis</em>\r\n</p>\r\n```\r\n\r\n### Marcado\r\n\r\n<mark>Esto es una parte marcada porque es relevante</mark>\r\n\r\n```HTML\r\n<p>\r\n  <mark>Esto es una parte marcada porque es relevante</mark>\r\n</p>\r\n```\r\n\r\n### Strong\r\n\r\n<strong>Esto es negro porque es importante</strong>\r\n\r\n```HTML\r\n<p>\r\n  <strong>Esto es negro porque es importante</strong>\r\n</p>\r\n```\r\n\r\n------\r\n\r\n## Saltos\r\n\r\n### wbr\r\nEsta etiqueta sirve para indicar dónde está bien que suceda un salto de línea, permite separar de manera correcta palabras largas o enlaces sin que el contenido se desajuste.\r\n\r\n<p>¿que-<wbr>pasaría-<wbr>si-<wbr>no-<wbr>quisieramos-<wbr>usar-<wbr>espacios-<wbr>entre-<wbr>palabras-<wbr>y-<wbr>no-<wbr>queremos-<wbr>que-<wbr>nuestra-<wbr>aplicación-<wbr>tenga-<wbr>overflow-<wbr>al-<wbr>verla-<wbr>en-<wbr>un-<wbr>celular-<wbr>o-<wbr>si-<wbr>tenemos-<wbr>una-<wbr>url-<wbr>como-<wbr>esta:<wbr>http://marco<wbr>madera<wbr>.com</p>\r\n\r\n```HTML\r\n<p>¿que-<wbr>pasaría-<wbr>si-<wbr>no-<wbr>quisieramos-<wbr>usar-<wbr>espacios-<wbr>entre-<wbr>palabras-<wbr>y-<wbr>no-<wbr>queremos-<wbr>que-<wbr>nuestra-<wbr>aplicación-<wbr>tenga-<wbr>overflow-<wbr>al-<wbr>verla-<wbr>en-<wbr>un-<wbr>celular-<wbr>o-<wbr>si-<wbr>tenemos-<wbr>una-<wbr>url-<wbr>como-<wbr>esta:<wbr>http://marco<wbr>madera<wbr>.com</p>\r\n```\r\n\r\n### hr\r\nRepresenta una regla horizontal, un salto de tema en una sección.\r\n\r\n<p>Texto</p> <hr /> <p>Texto</p>\r\n\r\n```HTML\r\n<p>Texto</p>\r\n<hr />\r\n<p>Texto</p>\r\n```\r\n\r\n-----\r\n\r\n## Acotaciones\r\n\r\n### blockquote\r\n\r\n<blockquote>Bloque acotado</blockquote>\r\n\r\n```HTML\r\n<blockquote>Bloque acotado</blockquote>\r\n```\r\n\r\n### q\r\n\r\n<q cite="https://example.com">Cuota</q>\r\n\r\n```HTML\r\n<q cite="https://example.com">Cuota.</q>\r\n```\r\n\r\n### cite\r\n\r\n<q>Cita de texto</q> <cite>— Nombre del autor</cite>\r\n\r\n```HTML\r\n<q>Cita de texto</q> <cite>— Nombre del autor</cite>\r\n```\r\n\r\n------\r\n\r\n## Abreviaciones y Definiciones\r\n\r\n### Abreviación\r\n\r\nEsto es una <abbr title="abreviación">abbr</abbr>.\r\n\r\n```HTML\r\n<p>Esto es una <abbr title="abreviación">abbr</abbr>.</p>\r\n```\r\n\r\n\r\n### Definición\r\n\r\n<p><dfn>HTML Semántico</dfn> es el uso de <abbr title="Hyper Text Markup Language">HTML</abbr>, pero con etiquetas.</p>\r\n\r\n```HTML\r\n<p>\r\n  <dfn>HTML Semántico</dfn> es el uso de \r\n  <abbr title="Hyper Text Markup Language">HTML</abbr>, pero con etiquetas.\r\n</p>\r\n```\r\n\r\n### Diálogos\r\n\r\nRecibe un atributo open, si no está indicado, no es mostrado.\r\n\r\n<dialog open><p>Esto es un cuadro de diálogo</p></dialog>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n```HTML\r\n<dialog open><p>Esto es un cuadro de diálogo</p></dialog>\r\n```\r\n\r\n### Detalles\r\n\r\nAl igual que los diálogos recibe un atributo open para que pueda estar por defecto abierto.\r\n\r\n\r\n\r\n<details>\r\n  <summary>Elemento</summary>\r\n  <p>Contenido del elemento</p>\r\n</details>\r\n\r\n```HTML\r\n<details>\r\n  <summary>Elemento</summary>\r\n  <p>Contenido del elemento</p>\r\n</details>\r\n```\r\n\r\n------\r\n\r\n## Imágenes\r\n\r\n### Img\r\n\r\n<img\r\n  src="https://picsum.photos/100"\r\n  alt="Imagen"\r\n/>\r\n\r\n```HTML \r\n<img\r\n  src="https://picsum.photos/100"\r\n  alt="Imagen"\r\n/>\r\n```\r\n\r\n### Figure\r\nFigure es una etiqueta de flujo de contenido, puede ser imagen, video, diagrama, código, una cita, etc, puede estar acompañado por la etiqueta figcaption que es la leyenda del contenido.\r\n\r\n<figure>\r\n  <img src="https://picsum.photos/200" alt="Figura">\r\n  <figcaption>Imagen Aleatoria</figcaption>\r\n</figure>\r\n\r\n```HTML\r\n<figure>\r\n  <img src="https://picsum.photos/200" alt="Figura">\r\n  <figcaption>Imagen Aleatoria</figcaption>\r\n</figure>\r\n```\r\n\r\n### Picture\r\nLa etiqueta source puede tener el atributo de cualquier media query, por lo tanto se puede customizar imagenes especiales para modo oscuro, puedes probar reescalar la imagen\r\n\r\n<picture>\r\n  <source srcSet="https://picsum.photos/100" media="(max-width: 500px)" />\r\n  <source srcSet="https://picsum.photos/200" media="(max-width: 876px)" />\r\n  <img\r\n    src="https://picsum.photos/300"\r\n    alt="Imagen Adaptable"\r\n  />\r\n</picture>\r\n\r\n```HTML \r\n<picture>\r\n  <source srcSet="https://picsum.photos/100" media="(max-width: 500px)" />\r\n  <source srcSet="https://picsum.photos/200" media="(max-width: 876px)" />\r\n  <img\r\n    src="https://picsum.photos/300"\r\n    alt="Imagen Adaptable"\r\n  />\r\n</picture>\r\n```\r\n\r\n--------\r\n\r\n## Formularios de entrada\r\nHay diversos tipos de entrada, button, checkbox, date, email, password, range, text, entre otros, la mayoría se pueden tan fácil como lo siguiente.\r\n#### Color\r\n\r\n<input type="color">\r\n\r\n```HTML\r\n<input type="color">\r\n```\r\n\r\n#### Números\r\n\r\n<input type="number" min="1" max="5" />\r\n\r\n```HTML\r\n<input type="number" min="1" max="5" />\r\n```\r\n\r\n------\r\n\r\n## Barras\r\n\r\n#### meter\r\nLa etiqueta meter es utilizada como indicador de una escala conocida, así que cuando el indicador está en un punto específico, puede variar los colores.\r\n\r\n<meter min="10" max="20" value="18">18 puntos</meter>\r\n\r\n```HTML\r\n<meter min="10" max="20" value="18">18 puntos</meter>\r\n```\r\n\r\n### progress\r\nLa barra de progreso es utilizada para mostrar el avance de una tarea. Existen dos valores indeterminada y determinada\r\n<p>Determinada:</p>\r\n\r\n<progress value="66" max="100">Determinate</progress>\r\n\r\n<p>Indeterminada:</p>\r\n\r\n<progress>Indeterminada</progress>\r\n\r\n```HTML\r\n<p>Determinada:</p>\r\n\r\n<progress value="66" max="100">Determinada</progress>\r\n\r\n<p>Indeterminada:</p>\r\n\r\n<progress>Indeterminada</progress>\r\n```\r\n\r\n### Select\r\nLa etiqueta `<select>` nos da la oportunidad de hacer listas despegables que pueden contener la etiqueta `<optgroup>` para agrupar entre opciones.\r\n\r\n<select name="elementos">\r\n<optgroup label="Grupo 1">\r\n  <option value="elemento1">Elemento1</option>\r\n  <option value="elemento2">Elemento2</option>\r\n  </optgroup>\r\n  <optgroup label="Grupo 2">\r\n  <option value="elemento3">Elemento3</option>\r\n  <option value="elemento4">Elemento4</option>\r\n  </optgroup>\r\n</select>\r\n\r\n```HTML\r\n<select name="elementos">\r\n  <optgroup label="Grupo 1">\r\n    <option value="elemento1">Elemento1</option>\r\n    <option value="elemento2">Elemento2</option>\r\n  </optgroup>\r\n  <optgroup label="Grupo 2">\r\n    <option value="elemento3">Elemento3</option>\r\n    <option value="elemento4">Elemento4</option>\r\n  </optgroup>\r\n</select>\r\n```\r\n\r\n------\r\n\r\n## Listas\r\nEn las listas el orden puede importar representado por `<ol>` o no representado por `<ul>`, debe de tener como hijo al menos un elemento de lista `<li>`\r\n\r\n<p>Lista ordenada</p>\r\n<ol>\r\n <li>objeto1\r\n <li>objeto2\r\n <li>objeto3\r\n <li>objeto4\r\n</ol>\r\n\r\n```HTML\r\n<p>Lista ordenada</p>\r\n<ol>\r\n <li>objeto1\r\n <li>objeto2\r\n <li>objeto3\r\n <li>objeto4\r\n</ol>\r\n```\r\n\r\n<p>Lista sin orden</p>\r\n<ul>\r\n <li>objeto1\r\n <li>objeto2\r\n <li>objeto3\r\n <li>objeto4\r\n</ul>\r\n\r\n```HTML\r\n<p>Lista sin orden</p>\r\n<ul>\r\n <li>objeto1\r\n <li>objeto2\r\n <li>objeto3\r\n <li>objeto4\r\n</ul>\r\n```\r\n\r\n------\r\n\r\n## Tablas \r\n\r\n<table><caption>Precio de cosas</caption><colgroup><col span="0" style="background-color:#e0ece4"><col span="1" style="background-color:#ebecf1"><col span="2" style="background-color:#f1f3de"></colgroup><thead><tr><th>Nombre</th><th>Precio</th><th>IVA</th></tr></thead><tbody><tr><td>Elemento 1</td><td>100</td><td>12</td></tr><tr><td>Elemento 2</td><td>200</td><td>24</td></tr></tbody><tfoot><tr><td>Total</td><td colspan="2" style="background-color:#e0ece4">$336</td></tr></tfoot></table>\r\n\r\n```HTML\r\n<table>\r\n  <caption>Precio de cosas</caption>\r\n  <colgroup>\r\n    <col span="0" style="background-color:#e0ece4">\r\n    <col span="1" style="background-color:#ebecf1">\r\n    <col span="2" style="background-color:#f1f3de">\r\n  </colgroup>\r\n  <thead>\r\n    <tr>\r\n      <th>Nombre</th>\r\n      <th>Precio</th>\r\n      <th>IVA</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Elemento 1</td>\r\n      <td>100</td>\r\n      <td>12</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Elemento 2</td>\r\n      <td>200</td>\r\n      <td>24</td>\r\n    </tr>\r\n  </tbody>\r\n  <tfoot>\r\n    <tr>\r\n      <td>Total</td>\r\n      <td colspan="2" style="background-color:#e0ece4">$336</td>\r\n    </tr>\r\n  </tfoot>\r\n</table>\r\n```\r\n\r\n-------\r\n\r\n## Conclusiones\r\nHemos cubierto varias etiquetas de HTML semántico y escribir con él es mucho más legible y limpio que escribir con solo divs, siempre y cuando sea apropiado. Los elementos mostrados son pocos de todos los que existen, es importante conocerlos y usarlos de manera correcta, para que los procesadores de HTML hagan sus tareas bien.\r\n\r\nRespecto al comentario sobre que debemos hacer web para humanos y no robots, pienso que no es muy acertado, que la computadora entienda lo que estamos haciendo es también importante, porque puede comunicar este significado a las [tecnologías asistivas](https://marcomadera.com/blog/accesibilidad-web#tecnologias-asistivas) que de igual forma son utilizadas para que humanos lean la web de una mejor manera, o hacer llegar a más personas a través del SEO de nuestra página o mejorar el sitio reconociendo los elementos que usamos fácilmente.'},{id:6,title:"Github CLI",author:"Marco Madera",cover:{original:"https://res.cloudinary.com/marcomadera/image/upload/v1600483976/Blog/6/Octocat-removebg_wamv2v.png",w120:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,h_120,w_120/v1600483976/Blog/6/Octocat-removebg_wamv2v.png",w300:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_300/v1600483976/Blog/6/Octocat-removebg_wamv2v.png",w760:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_760/v1600483976/Blog/6/Octocat-removebg_wamv2v.png"},coverDescription:"Gato pulpo y signo de consola",excerpt:"Github CLI es la herramienta oficial para ejecutar todo el flujo de trabajo en github desde la línea de comandos.",date:new Date("Sep 20 2020"),tags:["Terminal"],src:'# Github CLI\r\n\r\nSin importar el lenguaje que usamos para programar, la línea de comandos es una herramienta que nos permite trabajar de manera más rápida y productiva, tener que estar cambiando entre la terminal y la web iba en contra de esto, por lo que en octubre de 2019 [se empezó a trabajar con Github CLI](https://github.com/cli/cli/commit/8dd03144ffdc6c0d486d6b705f9c7fba871ee7c3), para reducir el cambio de contexto entre github web y la máquina local.\r\n\r\n## ¿Qué es github CLI?\r\nGithub <abbr title="Command Line Interface">CLI</abbr> es la herramienta oficial de código abierto para ejecutar todo el flujo de trabajo en github desde la línea de comandos.\r\n\r\nEsta herramienta nos permite interactuar con repositorios, issues, pull request y más.\r\n\r\n## Uso\r\nLa estructura de los comandos siguen el mismo patrón:\r\n\r\n```console\r\ngh <comando> <subcomando> [flags]\r\n```\r\n\r\nPor comandos se pueden tomar los siguientes:\r\n\r\n- gist : Crea gists\r\n- issue : Controla issues\r\n- pr : Controla pull requests\r\n- release : Control GitHub releases\r\n- repo : Crear, clonar, fork, y ver repositorios\r\n- alias: Crea atajos de comandos\r\n- api: Hace llamadas HTTP a Rest o GraphQL API.\r\n- auth: Login, logout, y refresh de la autenticación\r\n- config: Maneja la configuración para gh\r\n- help: El comando de ayuda\r\n\r\n## Instalación\r\nPara instalar Github <abbr title="Command Line Interface">CLI</abbr> en tu computadora, se descarga desde la [página oficial](https://cli.github.com/)\r\n\r\nUna vez instalado nos podemos loguear con el siguiente comando:\r\n```console\r\ngh auth login\r\n```\r\n\r\n![Login en github cli](https://res.cloudinary.com/marcomadera/image/upload/v1600485625/Blog/6/Login_Github_Cli_vjd3it.png "Login en github cli")\r\n\r\nOtros subcomandos que también se pueden usar: \r\n- ```gh auth logout```: Salir de la sesión.\r\n- ```gh auth refresh```: Actualizar las credenciales \r\n- ```gh auth status```: Verificar el estado de la autenticación.\r\n\r\n\r\n## Repositorios\r\nSubcomandos:\r\n- clone\r\n- create\r\n- fork\r\n- view\r\n\r\n### Crear repositorios\r\n```console\r\ngh repo create [<name>] [flags]\r\n```\r\n\r\nAdios [repo.new](https://repo.new), hola `gh repo create`\r\n\r\n![Creación de repositorio](https://res.cloudinary.com/marcomadera/image/upload/v1600490072/Blog/6/repocreate_z7ri8f.png "Creación de repositorio")\r\n\r\n### Ver los repositorios\r\n\r\n```console\r\ngh repo view [<repository>] [flags]\r\n```\r\nCon este comando se puede observar la descripción del repositorio y el contenido del archivo README.md.\r\nRecibe dos argumentos, el nombre del repositorio y flags que puede ser por ejemplo -w --web para ver el repositorio en la web.\r\nSi no se incluyen flags se verá el repositorio que está en el directorio actual.\r\n\r\n![Ver repositorio](https://res.cloudinary.com/marcomadera/image/upload/v1600493607/Blog/6/repoview_yvcrdm.png "Ver repositorio")\r\n\r\n### Clonar repositorio\r\nExisten varias formas de clonar un repositorio\r\n```console\r\ngh repo clone <repositorio> [<directorio>] [-- <gitflags>...]\r\n```\r\nEsto clona un repositorio que el propietario es la persona que está autenticada.\r\n```console\r\ngh repo clone proyecto\r\n```\r\nCon solo el usuario y el nombre del proyecto\r\n```console\r\ngh repo clone usuario/proyecto\r\n```\r\nTambién se puede usar de la forma tradicional a través de un enlace.\r\n```console\r\ngh repo clone https://github.com/usuario/proyecto\r\n```\r\n\r\n![Clonar repositorio](https://res.cloudinary.com/marcomadera/image/upload/v1600494350/Blog/6/repoclone_gdqyis.png "Clonar repositorio")\r\n\r\n### Hacer fork del repositorio\r\n```console\r\ngh repo fork [<repository>] [flags]\r\n```\r\nSi no se provee de ningún argumento, hace un fork del proyecto actual, lo que es bueno se quiere empezar a arreglar bugs o realizar una nueva mejora rápidamente.\r\n\r\n## Pull Request\r\nSubcomandos:\r\n- checkout\r\n- checks\r\n- close\r\n- create\r\n- diff\r\n- list\r\n- merge\r\n- ready\r\n- reopen\r\n- review\r\n- status\r\n- view\r\n\r\n### Crea pull request\r\n```console\r\ngh pr create --title "Título" --body "Contenido"\r\n```\r\n\r\n![Crear Pull Request](https://res.cloudinary.com/marcomadera/image/upload/v1600497956/Blog/6/rp_f3gmh5.png "Crear Pull Request")\r\n\r\n\r\n\r\n### Enlistar las pull request\r\n```console\r\ngh pr list [flags]\r\n```\r\nSe puede usar flags como filtros.\r\n\r\n### Ver pull request\r\n```console\r\ngh pr view [<number> | <url> | <branch>] [flags]\r\n```\r\n![Ver pull request](https://res.cloudinary.com/marcomadera/image/upload/v1600498372/Blog/6/prview_hrrjvo.png "Ver pull request")\r\n\r\n### Revisar el estado de las pr\r\nEsto mostrará el estado de las pr en las que participas\r\n```\r\ngh pr status\r\n```\r\n\r\n## Issues\r\nSubcomandos:\r\n- close\r\n- create\r\n- list\r\n- reopen\r\n- status\r\n- view\r\n\r\n### Crear issue\r\n```console\r\ngh issue create --title "Issue title" --body "Issue body"\r\n```\r\n\r\n![Crear issue](https://res.cloudinary.com/marcomadera/image/upload/v1600532173/Blog/6/createissue_ckxu8l.png "Crear issue")\r\n\r\n### Ver issue\r\n```console\r\ngh issue view {<number> | <url>} [flags]\r\n```\r\n\r\n\r\n### Enlistar issues\r\n```console\r\ngh issue list\r\n```\r\n\r\n![Enlistar Issue](https://res.cloudinary.com/marcomadera/image/upload/v1600535838/Blog/6/viewIssue_fl9jji.png "Enlistar Issue")\r\n\r\n### Revisar el estado del issue\r\n```console\r\ngh issue list -s "all"\r\n```\r\n\r\n## Gist\r\nSubcomandos:\r\n- create\r\n- edit\r\n- list\r\n- view\r\n\r\n```console\r\ngh gist create [<filename>... | -] [flags]\r\n```\r\n\r\nPara crear crear un gist nuevo se hace a través de uno o varios archivos separados por "-", por defecto los gist son privados, se pueden hacer públicos con el flag -public\r\n\r\n## Alias\r\nSubcomandos:\r\n- delete\r\n- list\r\n- set\r\n\r\n### Set Alias\r\nCrea un shortcut para los comandos gh\r\n```console\r\ngh alias set <alias> <expansion> [flags]\r\n```\r\n\r\n![Alias](https://res.cloudinary.com/marcomadera/image/upload/v1600539890/Blog/6/aliases_u0mnwn.png "Alias")\r\n\r\nEjemplo de lista de bugs\r\n```console\r\nalias misbugs=\'gh issue list -a "MarcoMadera" -l "bug"\'\r\n```\r\n\r\n### Enlistar Aliases\r\n\r\n```console\r\ngh alias list [flags]\r\n```\r\n\r\n## API\r\n```console\r\ngh api <endpoint> [flags]\r\n```\r\n\r\nGithub API es poderoso, con `gh api` se pueden hacer llamadas HTTP a Rest o GraphQL API. El método que usa por defecto es GET, se puede cambiar con el flag --method.\r\n\r\nPara llamadas a la API de github se puede usar de la siguiente manera-\r\n```console\r\ngh api repos/user/repo/releases\r\n```\r\n\r\nTambién soporta urls absolutas.\r\n\r\n![Llamada API](https://res.cloudinary.com/marcomadera/image/upload/v1600495544/Blog/6/api_c3nf1n.png "Llamada API")\r\n\r\n## Conclusión\r\nGithub CLI reduce la necesidad de abrir [Github.com](https://github.com/) después de hacer commits y push de código, por lo que es de gran ayuda para ahorrar tiempo, a día de hoy es la versión 1.0.0 y trae la mayoría de características de github.'},{id:7,title:"CSS",author:"Marco Madera",cover:{original:"https://res.cloudinary.com/marcomadera/image/upload/v1602894559/Blog/7/css_k23ypb.png",w120:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,h_120,w_120/v1602894559/Blog/7/css_k23ypb.png",w300:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_300/v1602894559/Blog/7/css_k23ypb.png",w760:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_760/v1602894559/Blog/7/css_k23ypb.png"},coverDescription:"CSS Logo",excerpt:"CSS es el lenguaje que se usa para dar estilos a un documento escrito en lenguaje marcado. Con él podemos controlar los elementos en aspecto, posición y más.",date:new Date("Oct 20 2020"),tags:["CSS","Personalización"],src:'# CSS\r\n\r\nHe visto sitios webs impresionantes con una gran presentación, sitios que generan una buena experiencia como usuario y muchos solo lo logran con una buena apariencia. Siempre y cuando se quiera hacer una web más bonita, atractiva y presentable, aplicar estilos CSS es lo más adecuado.\r\n\r\n## ¿Qué es CSS?\r\n<p>\r\n  <abbr title="Cascading Style Sheets">CSS</abbr> es el lenguaje que se usa para dar estilos a un documento escrito en lenguaje marcado. Con él podemos controlar los elementos en aspecto, posición y más.\r\n</p>\r\n\r\n## Uso\r\nExisten tres formas de usar los estilos, a través de la etiqueta style, en línea, y en una hoja externa.\r\n\r\n### Estilos en la etiqueta <style>\r\nDe igual forma se puede usar directamente en un elemento HTML con el atributo `style` de la siguiente forma:\r\n```html\r\n<p style="color: #fff; width: fit-content; padding: 5px 10px; margin: auto; border-radius: 10px; background: radial-gradient(ellipse at center, rgba(240,47,23,0.7) 0%, rgba(240,47,23,1) 100%);">\r\nEn Línea\r\n</p>\r\n```\r\n\r\n<p style="color: #fff; width: fit-content; padding: 5px 10px; margin: auto; border-radius: 10px; background: radial-gradient(ellipse at center, rgba(240,47,23,0.7) 0%, rgba(240,47,23,1) 100%);">\r\nEn Línea\r\n</p>\r\n\r\n### Estilos en línea\r\nCSS se puede usar directamente desde la etiqueta HTML `<style>`.\r\n```html\r\n<style>\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n</style>\r\n```\r\n\r\n### Estilos en una hoja externa\r\n\r\nLa manera que se aprovecha mejor sería hacer un link a una hoja de estilos con extensión .css en una etiqueta `<link>` dentro de la etiqueta `<head>` de nuestro documento HTML de la siguiente manera, donde href es la ubicación de la hoja de estilos.\r\n\r\n```html\r\n<link\r\n  rel="stylesheet"\r\n  href="./styles.css"\r\n/>\r\n```\r\n\r\n## Selectores\r\nAl usar CSS en una hoja externa o en la etiqueta `<style>` \r\nLos selectores son necesarios para estilar elementos específicos\r\n\r\n### Etiquetas\r\nPara seleccionar etiquetas simplemente se escribe el nombre de la etiqueta y si se quiere especificar alguna etiqueta que contenga cierto atributo se puede hacer seguido con corchetes `[]`, así seleccionará todas las etiquetas del mismo nombre que tengan cierto atributo.\r\n\r\n```css\r\nnav { ... }\r\n\r\nnav[class="topNavbar"] { ... }\r\n```\r\n\r\n### ID\r\nLas id en HTML son únicas, se seleccionan con el símbolo `#`\r\n```css\r\n#SomeId {\r\n\r\n}\r\n```\r\n\r\n### Clases\r\nAl usar el nombre de una clase con un punto "." antes se seleccionarán todos los elementos que tienen la misma clase.\r\n```css\r\n.clase{\r\n\r\n}\r\n```\r\n\r\n\r\n### Combinaciones\r\nLos selectores se pueden combinar para seleccionar elementos que tienen cierta relación siempre de forma descendente, y se pueden compartir propiedades separando por comma ",".\r\n\r\n\r\nSelecciona todas las etiquetas nav con clase topNavbar\r\n\r\n```css \r\nnav.topNavbar { ... }\r\n```\r\n\r\nSelecciona todos los elementos de todos los subniveles con la clase topNavbar dentro de una etiqueta nav\r\n\r\n```css\r\nnav .topNavbar { ... }\r\n```\r\nSelecciona todos los elementos de primer subnivel con la clase topNavbar dentro de una etiqueta nav\r\n```css\r\nnav > .topNavbar{ ... }\r\n```\r\nSelecciona al primer elemento del mismo nivel que sigue inmediatamente con la clase topNavbar\r\n```css\r\nnav + .topNavbar{ ... }\r\n```\r\n Selecciona a todos los elementos del mismo nivel que sigue inmediatamente con la clase topNavbar\r\n```css\r\nnav ~ .topNavbar{ ... }\r\n```\r\nSelecciona a todos los elementos con etiqueta nav que incluye topNavbar en su atributo clase\r\n```css\r\nnav[class*="topNavbar"] { ... }\r\n```\r\n\r\n## Propiedades\r\nLas propiedades son las reglas que sobre escribirán los estilos por default que le da el navegador, es todo lo que está dentro del paréntesis.\r\n```css\r\ndiv {\r\n  margin-top: 10px;\r\n  margin-right: 10px;\r\n  margin-bottom: 10px;\r\n  margin-left: 10px;\r\n}\r\n```\r\n\r\nLas propiedades abreviadas nos permiten tener varias propiedades en una misma línea, ahorra tiempo y se mira las legible.\r\nEl anterior margen se puede escribir de la siguiente manera con una propiedad abreviada:\r\n\r\n```css\r\ndiv { \r\n  margin: 10px;\r\n}\r\n```\r\n\r\nSi se quiere usar las cuatro propiedades de margen se pueden usar, de manera que el sentido sería la misma a las manecillas del reloj de la siguiente forma.\r\n\r\n```css\r\ndiv {\r\n  margin: 10px 20px 30px 40px;\r\n}\r\n```\r\nLo que sería lo mismo a lo siguiente\r\n\r\n```css\r\ndiv {\r\n  margin-top: 10px;\r\n  margin-right: 20px;\r\n  margin-bottom: 30px;\r\n  margin-left: 40px;\r\n}\r\n```\r\n\r\nSi solo se incluyen dos valores, se toma como el primer valor a margin-top y margin-bottom y el segundo valor margin-right y margin-left.\r\n\r\nEn caso de incluirse 3 valores, se toman de forma de las manecillas del reloj y el segundo valor sería para margin-left.\r\n\r\n### Propiedades customizadas\r\nPara crear una propiedad customiza se utiliza como prefijo el doble guión -- y seguido del nombre de la propiedad y el valor que lleva. Para usar la propiedad se hace a través de la función "var".\r\n\r\n```css\r\n.topNavbar {\r\n  --color-verde: #1DB954;\r\n  --color-gris: #ccc;\r\n  background: var(--color-gris);\r\n  color: var(--color-verde);\r\n}\r\n```\r\n\r\nPara usar las propiedades en un scope global del documento se pueden definir en la pseudo clase :root.\r\n\r\n```css\r\n:root{\r\n  --color-verde: #1DB954;\r\n  --color-gris: #ccc;\r\n}\r\n\r\n.topNavbar {\r\n  background: var(--color-gris);\r\n  color: var(--color-verde);\r\n}\r\n\r\n.bottomNavbar {\r\n  background: var(--color-gris);\r\n  color: var(--color-verde);\r\n}\r\n```\r\n\r\n\r\n### Herencia de propiedades\r\nCSS como su nombre lo indica hoja de estilos en cascada, va en forma de cascada, de arriba hacia abajo, por lo que una propiedad abreviada debe de ir antes de una propiedad unica para que sobreescriba los estilos por defecto, se pone por debajo se escribirán de nuevo los estilos por defecto.\r\n\r\n\r\nMal:\r\n```css\r\np{\r\n  font-style: italic;\r\n  font: 20px Arial;\r\n}\r\n```\r\n\r\nBien:\r\n```css\r\np{\r\n  font: 20px Arial;\r\n  font-style: italic;\r\n}\r\n```\r\n\r\n## Funciones\r\nCSS al igual que otros lenguajes cuenta con funciones que son visuales y no podemos crear nuevas funciones.\r\n\r\n### Funciones básicas\r\n```css\r\n{\r\n  color: var(--color-white);\r\n  color: rgba(123,123,123,0.2);\r\n  width: calc(100vw - 80px);\r\n  background: radial-gradient(ellipse at center, rgba(240,47,23,0.7) 0%, rgba(240,47,23,1) 100%);\r\n  background-image: url("src/image.jpg");\r\n}\r\n```\r\n\r\n### Funciones de selectores\r\n```css\r\n.item:nth-of-type(3n + 1) {\r\n  grid-row-end: span 3;\r\n}\r\n.item:nth-of-type(3n + 2) {\r\n  grid-row-end: span 2;\r\n}\r\n.item:nth-of-type(3n + 3) {\r\n  grid-row-end: span 1;\r\n}\r\n```\r\n\r\n### Funciones de dimensiones\r\n```css\r\n.dimension {\r\n  transform: scale(2);\r\n  transform: translate(-50%, -50%);\r\n  transform: perspective(50em) rotateY(50deg)\r\n}\r\n```\r\n\r\n### Funciones filtro\r\n```css\r\nimg {\r\n  filter: brightness(110%);\r\n  filter: contrast(120%);\r\n  filter: grayscale(90%);\r\n}\r\n```\r\n\r\n### Funciones en grids\r\n```css\r\n.grid {\r\n  grid-template-columns: fit-content(250px) 1fr;\r\n  grid-template-columns: minmax(10px, 100px) 1fr minmax(min-content, 300px);\r\n  grid-template-columns: repeat(6, 40px 80px);\r\n}\r\n```\r\n\r\n## Reglas at\r\nSon declaraciones que comienzan con el símbolo arroba "@", \r\n\r\n@import nos permite incluir una hoja de estilos externa y con esto nos da una opción alternativa a la de HTML para agregar más fuentes comúnmente y otras características bajo un conjunto de reglas si se requiere.\r\n\r\nEl siguiente código importará la fuente monserrat si se encuentra en un dispositivo de impresión.\r\n```css\r\n@import url(\'https://fonts.googleapis.com/css2?family=Montserrat&display=swap\') print;\r\n```\r\n\r\n@keyframes  — Describe la configuración de pasos intermedios en una secuencia de animación CSS.\r\n\r\n@media se usa para aplicar estilos para diferentes tipos de medios\r\n```css\r\n@media screen and (max-width: 1300px){\r\n  nav{\r\n    width: 100px;\r\n  }\r\n}\r\n\r\n@keyframes nprogress-spinner {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n```\r\n\r\n## El modelo de caja\r\n<style>\r\n  .boxModel__margin {\r\n    max-width: 300px;\r\n    height: 200px;\r\n    outline: dashed 1px #000;\r\n    background: #ffca96;\r\n    margin: auto;\r\n    position: relative;\r\n  }\r\n  .boxModel__border {\r\n    max-width: 240px;\r\n    height: 140px;\r\n    outline: solid 1px #000;\r\n    background: #ffdc91;\r\n  }\r\n  .boxModel__padding {\r\n    max-width: 180px;\r\n    height: 80px;\r\n    outline: solid 1px #000;\r\n    background: #bfd081;\r\n  }\r\n  .boxModel__content {\r\n    max-width: 120px;\r\n    height: 30px;\r\n    outline: solid 1px #000;\r\n    background: #7fb6c2;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 13px;\r\n  }\r\n  .boxModel-center{\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    margin: auto;\r\n  }\r\n  .boxModel__margin span{\r\n    font-size: 13px;\r\n    margin-left: 10px;\r\n  }\r\n</style>\r\n<div class="boxModel__margin">\r\n<span>margin</span>\r\n  <div class="boxModel__border boxModel-center">\r\n  <span>border</span>\r\n    <div class="boxModel__padding boxModel-center">\r\n    <span>padding</span>\r\n      <div class="boxModel__content boxModel-center">\r\n        contenido\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n- Contenido - Es el contenido de la caja donde el texto y las imágenes aparecen.\r\n- Padding - El relleno es un espacio entre el contenido y el borde.\r\n- Border - El borde es lo que rodea al relleno y el contenido.\r\n- Margin - El margen es un espacio desde el borde hacia el exterior.\r\n\r\n### Diferencia entre Padding y Margin\r\n<style>\r\n.box { \r\n  width: 200px;\r\n  height: 100px;\r\n  background: #99c;\r\n  border: 1px solid #000;\r\n}\r\n.with-padding{\r\n  padding: 30px;\r\n}\r\n.with-margin{\r\n  margin: 30px;\r\n}\r\n</style>\r\n<div style="display: flex;">\r\n  <div class="box with-padding">Con relleno</div>\r\n  <div class="box with-margin">Con margen</div>\r\n</div>\r\n\r\n```html\r\n<div style="display: flex;">\r\n  <div class="box with-padding"></div>\r\n  <div class="box with-margin"></div>\r\n</div>\r\n```\r\n\r\n```css\r\n.box { \r\n  width: 200px;\r\n  height: 100px;\r\n  background: #99c;\r\n  border: 1px solid #000;\r\n}\r\n.with-padding{\r\n  padding: 30px;\r\n}\r\n.with-margin{\r\n  margin: 30px;\r\n}\r\n```\r\n\r\nComo podemos ver el borde es el que delimita el color del background, por lo que el padding toma el color del background ya que como se vio en el modelo de caja está dentro del borde, y empuja 30 pixeles a partir del borde hacia dentro, al contrario el margen como está fuera del borde no se pinta con el background y hace un espacio del borde hacia afuera separando ambas cajas.\r\n\r\n## Animaciones\r\nLas animaciones en css requieren de la regla keyframes seguida del nombre de la animación, de propiedades se pueden utilizar porcentajes para ser más específicos en los pasos o las propiedades "from" y "to" que sería lo mismo que 0% y 100%.\r\nEsta animación se le asigna a un elemento con la propiedad animation-name y con animation-duration se establece la duración de la animación.\r\n\r\n```css\r\n@keyframes desplazamiento {\r\n  from {\r\n    transform: translate(10px, 10px);\r\n  }\r\n  to {\r\n    transform: translate(100px, 100px);\r\n  }\r\n}\r\n```\r\n\r\nUn ejemplo simple de uso de porcentajes sería el siguiente:\r\n\r\n<style>\r\n.ball {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 50px;\r\n  height: 50px;\r\n  color: #fff;\r\n  background: #d32f2fe1;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  animation: bounce 3s linear alternate infinite;\r\n  left: 0;\r\n  top: 0;\r\n}\r\n.ball span{\r\n  position: absolute;\r\n  width: 20px;\r\n  height: 4px;\r\n  background-color: white;\r\n  border-radius: 2px;\r\n  box-shadow: 0 0 2px 0 #ccc;\r\n}\r\n\r\n.ball span:nth-of-type(1){\r\n  transform:rotate(45deg);\r\n}\r\n.ball span:nth-of-type(2){\r\n  transform:rotate(-45deg);\r\n}\r\n@keyframes bounce {\r\n  32%, 66% {\r\n    top: 0px;\r\n    animation-timing-function: ease-in;\r\n  }\r\n  16%, 50%, 83%{\r\n    top: 80px;\r\n    animation-timing-function: ease-out;\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n    top: 0px;\r\n    animation-timing-function: ease-out;\r\n    left: calc(100% - 50px);\r\n  }\r\n}\r\n</style>\r\n<div style="height: 130px;">\r\n  <span class="ball"><span></span><span></span></span>\r\n</div>\r\n\r\n```css\r\n.ball {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 50px;\r\n  height: 50px;\r\n  background: #d32f2fe1;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  animation: bounce 3s linear alternate infinite;\r\n  left: 0;\r\n  top: 0;\r\n}\r\n.ball:before, .ball:after {\r\n  content: \'\';\r\n  position: absolute;\r\n  width: 20px;\r\n  height: 4px;\r\n  background-color: white;\r\n  border-radius: 2px;\r\n  box-shadow: 0 0 2px 0 #ccc;\r\n}\r\n\r\n.ball:before {\r\n  transform:rotate(45deg);\r\n}\r\n.ball:after {\r\n  transform:rotate(-45deg);\r\n}\r\n@keyframes bounce {\r\n  32%, 66% {\r\n    top: 0px;\r\n    animation-timing-function: ease-in;\r\n  }\r\n  16%, 50%, 83%{\r\n    top: 80px;\r\n    animation-timing-function: ease-out;\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n    top: 0px;\r\n    animation-timing-function: ease-out;\r\n    left: calc(100% - 50px);\r\n  }\r\n}\r\n```\r\n\r\n## Compatibilidad\r\nCSS no se renderiza igual en todos los navegadores, un decorador de texto puede que no luzca de la misma forma en firefox que en chrome, aplicar ciertos trucos para que todos luzca igual en todos los navegadores puede que sea una tarea tediosa, por lo que también es importante saber el mercado de usuarios al que va dirigido la página que creamos y saber en que navegadores enforcarnos.\r\n\r\nCSS es un lenguaje vivo, en el cual se sigue trabajando en nuevas características, algunos navegadores deciden implementar estas nuevas características, las cuales podemos utilizar con prefijos que solo el navegador conoce porque si un navegador no conoce una propiedad o valor la ignorará e irá a la siguiente cosa que entienda, los siguientes prefijos son los mas comunes: \r\n\r\n| Prefijo  |          Navegadores        |\r\n|----------|:---------------------------:|\r\n| -webkit- | Chrome, Safari              |\r\n| -moz-    | Firefox                     |\r\n| -o-      | Opera                       |\r\n| -ms-     | Microsoft Internet Explorer |\r\n\r\n[Can I Use](https://caniuse.com) es una web que nos permite saber si un navegador soporta ciertas características la cual vale la pena explorar\r\n\r\n## Conclusion\r\nHemos visto una vista muy general sobre lo que es CSS, aprender este lenguaje es lo básico para desarrollar sitios webs, hay muchas cosas que debemos de tener en cuenta y conocer el alcance que puede tener CSS por si solo con las características que vienen por defecto es una gran ventaja a la hora de crear productos.'},{id:8,title:"Git",author:"Marco Madera",cover:{original:"https://res.cloudinary.com/marcomadera/image/upload/v1608823033/Blog/Git/Git-logo_pr848f.png",w120:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,h_120,w_120/v1608823033/Blog/Git/Git-logo_pr848f.png",w300:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_300/v1608823033/Blog/Git/Git-logo_pr848f.png",w760:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_760/v1608823033/Blog/Git/Git-logo_pr848f.png"},coverDescription:"Git Logo",excerpt:"El control de versiones es un sistema que guarda los cambios en el tiempo de uno o varios archivos.",date:new Date("Dec 31 2020"),tags:["Terminal"],src:'# Control de versiones de Git\r\n\r\nEn mis inicios programando siempre escuchaba algo sobre el control de versiones, era algo que veía un poco complicado y donde no me quería meter porque estaba más enfocado en aprender otras cosas. Lo simplificaba como en qué estado se encuentra mi proyecto y usar versión *alpha*, *beta*, v1.0.0... Lo que ahora veo como una etiqueta que no se altera. Esto me llevó a realizar cambios sin justificación y a perder mucho trabajo que no guardé.\r\n\r\n<tweet id="1342099157398544385">\r\n\r\nEn algún momento al conocer Git me sentí igual que Flavio y por los recuerdos me dio a escribir sobre Git para no olvidar de que vale la pena saber más de unos comandos.\r\n\r\n<colors red blue green yellow lightblue purple darkyellow>\r\n\r\n## ¿Qué es el control de versiones de Git?\r\n\r\nEl control de versiones es un **sistema que guarda los cambios en el tiempo** de uno o varios archivos. Se pueden revertir estos cambios a un estado anterior, lo que significa que si tenemos un problema, podemos comparar los cambios en el tiempo, ver quién modificó algo que pudiera causar el problema y poder cambiar el estado actual a uno donde no se presente el problema.\r\n\r\nGit es un sistema de control de versiones que **almacena la información como un flujo de *snapshots*** de un sistema de archivos. Cada vez que hay un cambio o se guarda el estado del proyecto, Git toma una imagen de todos los archivos y crea una referencia a ese momento. En un futuro cambio, si un archivo no se modifica Git no vuelve a almacenar el archivo, sino que usa la referencia al momento anterior.\r\n\r\nGit contempla tres estados:\r\n\r\n- `modified`: Cuando un archivo cambia, pero no se ha enviado a la base de datos local de Git.\r\n- `staged`:  Cuando se añade un archivo modificado para ser enviado en el siguiente `commit`.\r\n- `commited`: Cuando los datos están almacenados en la base de datos local de Git.\r\n\r\n## Configuración de git\r\n\r\nPara usar Git lo primero que se debe de hacer es instalarlo, se obtiene desde la [página de descarga](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) siguiendo los pasos según el sistema operativo que tengas.\r\n\r\nUna vez instalado podremos usar en nuestra consola el comando `git config --list` para ver la configuración de Git. Para modificar los datos para el entorno global usamos `git config --global <configuración> <valor>`.\r\nLo esencial a modificar tiene que ser el nombre y el email, que son las configuraciones que usan todos los `commits`.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">config --global user.name </span></span><span class="green">"MarcoMadera"</span>\r\n<span class="purple">git</span> <span class="blue">config --global user.email </span><span class="green">"example@email.com"</span>\r\n\r\n<span class="purple">git</span> <span class="blue">config --list</span>\r\nhttp.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt\r\ncore.autocrlf=<span class="red">true</span>\r\ncore.fscache=<span class="red">true</span>\r\ncore.symlinks=<span class="red">false</span>\r\npull.rebase=<span class="red">false</span>\r\ncredential.helper=manager\r\ncore.editor=<span class="green">"C:\\Users\\marco\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe" </span><span class="blue">--wait</span>\r\nuser.name=MarcoMadera\r\nuser.email=example@email.com</code></pre>\r\n\r\n## Uso básico\r\n\r\nEl flujo de trabajo en Git sigue el siguiente patrón:\r\n\r\n1. Haces modificaciones en tu directorio de trabajo controlado.\r\n2. Selecciona los cambios a añadir en el estado *staged* para ser enviados con el siguiente `commit`.\r\n3. Haces un commit, el cual toma todos los archivos en estado *staged* y almacena la *snapshot* en la base de datos de Git.\r\n\r\nPara tener un directorio nuevo de trabajo controlado, en la terminal se dirige a la ruta del proyecto para **inicializar el repositorio** con el comando `git init`. Esto creará el archivo `.git` en la raíz del proyecto, donde se guardará la información de cada *snapshot*.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">cd</span> <span class="blue">repositorios/gitpost/</span>\r\n<span class="purple">git</span> <span class="blue">init</span>\r\nInitialized empty Git repository in C:/Users/marco/repositorios/gitpost/.git/</code></pre>\r\n\r\nPara no ir a ciegas comando tras comandos podemos **revisar el estado** con `git status`. Nos informará dónde estamos, sobre el estado de los archivos, si se han modificado, agregado o eliminado.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">status</span>\r\nOn branch master\r\nYour branch is up-to-date with <span class="green">\'origin/master\'</span>.\r\nUntracked files:\r\n  (use <span class="green">"git add &lt;file&gt;..."</span>. to include in what will be committed)\r\n  <span class="red">README</span>\r\nnothing added to commit but untracked files present (use <span class="green">"git add"</span> to track)</code></pre>\r\n\r\nPara **agregar archivos al *stage*** usamos `git add <archivo>`, `git add *` o `git add .` agrega todos los archivos en el *stage*, `git add *.<extensión>` agrega los archivos con la extensión especificada y `git add /<folder>` agrega todos los archivos dentro de la carpeta especificada.\r\n\r\nSi nos equivocamos, para **eliminar archivos del *stage*** sin borrarlo de nuestro directorio usamos `git rm --cached <archivo>`. El *flag* `--cached` hace que no se elimine de nuestro directorio, si no se agrega se eliminaría también de nuestro directorio de trabajo. Si olvidamos agregar el flag no está todo perdido, podemos recuperar el archivo con `git restore <archivo>`.\r\n\r\nPara **Ignorar archivos** se crea un archivo `.gitignore` en la raíz del proyecto. Esto hace que todos los archivos que coincidan dentro de `.gitignore` no sean tomados en cuenta para ninguna acción con Git. Puedes revisar la [colección de archivos de .gitignore](https://github.com/github/gitignore) para ver ejemplos o usarlos en tus proyectos.\r\n\r\nYa teniendo todo lo que queramos para **guardar los archivos** usamos `git commit`. Esto abrirá el editor que definimos en la configuración para poner un mensaje descriptivo o igual lo podemos añadir en la consola con el *flag* `-m`. Para añadir archivos que ya habían estado en el *stage* usamos el *flag* `-am` que es la combinación de `-a --add` y `-m --message`.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">commit -m</span> <span class="green">"&lt;mensaje descriptivo&gt;"</span>\r\n<span class="purple">git</span> <span class="blue">commit -am</span> <span class="green">"&lt;mensaje descriptivo&gt;"</span></code></pre>\r\n\r\nMostrar el historial de commits del repositorio usamos `git log`, el resultado de este es un poco feo, por lo que se puede hacer más bonito con el *flag* `--pretty`. `git log` solo mostrará por defecto el historial por debajo de la rama.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">log</span>\r\n<span class="yellow">commit ed3946555db4597294bae2014cfe996b88268bef (<span class="lightblue">HEAD -></span> <span class="green">master</span>, <span class="red">origin/master</span>)</span>\r\nAuthor: MarcoMadera &lt;example@email.com&gt;\r\nDate:   Mon Jul 6 17:09:50 2020 -0500\r\n\r\n    hola mundo\r\n\r\n<span class="yellow">commit e150e0079854fa6a5996db6ee692fc1377a1f2ff</span>\r\nAuthor: MarcoMadera &lt;example@email.com&gt;\r\nDate:   Mon Jun 29 19:28:42 2020 -0500\r\n\r\n    hello world\r\n\r\n<span class="purple">git</span> <span class="blue">log --oneline</span>\r\n<span class="yellow">65b5a12 (<span class="lightblue">HEAD -></span> <span class="green">master</span>, <span class="red">origin/master</span>)</span> hello world\r\n<span class="yellow">fd14a30</span> hola mundo\r\n\r\n<span class="purple">git</span> <span class="blue">log --pretty=format:</span> <span class="green">"%h | %cn | %cr | %s"</span>\r\n<span class="yellow">65b5a12</span> | MarcoMadera | 10 minutes ago | hello world\r\n<span class="yellow">fd14a30</span> | MarcoMadera | 11 minutes ago | hola mundo</code></pre>\r\n\r\nPara **mostrar las diferencias entre un commit y otro** de un archivo lo hacemos con el comando `git diff`. `git diff` muestra la diferencia por defecto de lo que has puesto en el *stage* y lo que vas a hacer commit. Muestra las líneas exactas que fueron añadidas o removidas. El comando puede ser selectivo usando el hash de cada commit a comparar.\r\n\r\nUsar `git diff` no suele ser muy placentero de ver para archivos largos, se puede explorar el uso de `git difftool` para configurar una herramienta más gráfica para estos casos.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">diff commitA commitB</span>\r\n\r\ndiff <span class="blue">--git</span> <span class="lightblue">a/index.js b/index.js</span>\r\nindex 5e1c309..ade1f58 100644\r\n<span class="red">---</span> <span class="lightblue">a/index.js</span>\r\n<span class="green">+++</span> <span class="lightblue">b/index.js</span>\r\n@@ <span class="red">-</span>1 <span class="green">+</span>1 @@\r\n<span class="red">-</span>Hello World\r\n<span class="green">+</span>Hola Mundo\r\n\r\n<span class="purple">git</span> <span class="blue">difftool commitA commitB</span>\r\nHello World       | Hola Mundo\r\n~                 | ~</code></pre>\r\n\r\n## El modelo de ramas\r\n\r\nSe puede decir que Git tiene tres árboles donde se agrupan archivos. `HEAD` es el indicador del último *commit* realizado y de la rama actual. `Index` es el espacio donde se agregan/modifican/eliminan los archivos del antes mencionado *stage* antes de realizar un commit. Finalmente está el directorio de trabajo manejado como el `Working tree`\r\n\r\nAl realizar el comando `git init` Git crea una rama por defecto que suele ser *master*. Esta no es una rama especial, es como cualquier otra con el detalle que es la inicial, la que Git crea por defecto. Nuestro proyecto puede seguir cualquier rama como principal en cualquier punto.\r\n\r\nCuando un *commit* es creado es mandado al `HEAD`, la rama actual, donde Git guarda la información de los cambios una única vez, lo demás son referencias con cambios, no se vuelve almacenar nada ya creado. Con esto Git permite crear copias de nuestro proyecto en un estado en formas de referencias y experimentar con ellas todo lo que queramos sin haber otro coste más que los nuevos cambios. Estos grupos de referencias en un estado son llamadas ramas que igual tendrá solamente un identificador propio.\r\n\r\n<svg style="margin: 0 auto;" width="100%" height="476pt" viewBox="0.00 0.00 206.00 476.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\r\n<g transform="scale(1 1) rotate(0) translate(4 472)">\r\n<title>Representación de ramas</title>\r\n<polygon fill="transparent" points="-4,5 -4,-472 203,-472 203,5 -4,5"></polygon><g><title>a1</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="27" cy="-450" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="27" y="-445.8" font-family="inherit" font-size="13.00">a1</text></g><g><title>a2</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="27" cy="-378" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="27" y="-373.8" font-family="inherit" font-size="13.00">a2</text></g><g><title>a1-&gt;a2</title>\r\n<path fill="none" stroke="#9c27b0" d="M27,-431.697C27,-423.983 27,-414.712 27,-406.112"></path>\r\n<polygon fill="#9c27b0" stroke="#9c27b0" points="30.5001,-406.104 27,-396.104 23.5001,-406.104 30.5001,-406.104"></polygon></g><g><title>a3</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="27" cy="-306" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="27" y="-301.8" font-family="inherit" font-size="13.00">a3</text></g><g><title>a2-&gt;a3</title>\r\n<path fill="none" stroke="#9c27b0" d="M27,-359.697C27,-351.983 27,-342.712 27,-334.112"></path>\r\n<polygon fill="#9c27b0" stroke="#9c27b0" points="30.5001,-334.104 27,-324.104 23.5001,-334.104 30.5001,-334.104"></polygon></g><g><title>b1</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="99" cy="-306" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="99" y="-301.8" font-family="inherit" font-size="13.00">b1</text></g><g><title>a2-&gt;b1</title>\r\n<path fill="none" stroke="#4f5cc8" d="M41.5703,-362.834C51.7499,-352.938 65.5239,-339.546 77.0306,-328.359"></path>\r\n<polygon fill="#4f5cc8" stroke="#4f5cc8" points="79.4741,-330.865 84.2043,-321.385 74.5945,-325.846 79.4741,-330.865"></polygon></g><g><title>a4</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="27" cy="-234" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="27" y="-229.8" font-family="inherit" font-size="13.00">a4</text></g><g><title>a3-&gt;a4</title>\r\n<path fill="none" stroke="#9c27b0" d="M27,-287.697C27,-279.983 27,-270.712 27,-262.112"></path>\r\n<polygon fill="#9c27b0" stroke="#9c27b0" points="30.5001,-262.104 27,-252.104 23.5001,-262.104 30.5001,-262.104"></polygon></g><g><title>a5</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="27" cy="-162" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="27" y="-157.8" font-family="inherit" font-size="13.00">a5</text></g><g><title>a4-&gt;a5</title>\r\n<path fill="none" stroke="#9c27b0" d="M27,-215.697C27,-207.983 27,-198.712 27,-190.112"></path>\r\n<polygon fill="#9c27b0" stroke="#9c27b0" points="30.5001,-190.104 27,-180.104 23.5001,-190.104 30.5001,-190.104"></polygon></g><g><title>a6</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="27" cy="-90" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="27" y="-85.8" font-family="inherit" font-size="13.00">a6</text></g><g><title>a5-&gt;a6</title>\r\n<path fill="none" stroke="#9c27b0" d="M27,-143.697C27,-135.983 27,-126.712 27,-118.112"></path>\r\n<polygon fill="#9c27b0" stroke="#9c27b0" points="30.5001,-118.104 27,-108.104 23.5001,-118.104 30.5001,-118.104"></polygon></g><g><title>a7</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="27" cy="-18" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="27" y="-13.8" font-family="inherit" font-size="13.00">a7</text></g><g><title>a6-&gt;a7</title>\r\n<path fill="none" stroke="#9c27b0" d="M27,-71.6966C27,-63.9827 27,-54.7125 27,-46.1124"></path>\r\n<polygon fill="#9c27b0" stroke="#9c27b0" points="30.5001,-46.1043 27,-36.1043 23.5001,-46.1044 30.5001,-46.1043"></polygon></g><g><title>b2</title><ellipse fill="lightgrey" stroke="lightgrey" cx="99" cy="-234" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="99" y="-229.8" font-family="inherit" font-size="13.00">b2</text></g><g><title>b1-&gt;b2</title><path fill="none" stroke="#4f5cc8" d="M99,-287.697C99,-279.983 99,-270.712 99,-262.112"></path>\r\n<polygon fill="#4f5cc8" stroke="#4f5cc8" points="102.5,-262.104 99,-252.104 95.5001,-262.104 102.5,-262.104"></polygon></g><g><title>c1</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="171" cy="-234" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="171" y="-229.8" font-family="inherit" font-size="13.00">c1</text>\r\n</g><g><title>b1-&gt;c1</title>\r\n<path fill="none" stroke="#2e7d32" d="M113.57,-290.834C123.75,-280.938 137.524,-267.546 149.031,-256.359"></path>\r\n<polygon fill="#2e7d32" stroke="#2e7d32" points="151.474,-258.865 156.204,-249.385 146.595,-253.846 151.474,-258.865"></polygon>\r\n</g><g><title>b3</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="99" cy="-162" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="99" y="-157.8" font-family="inherit" font-size="13.00">b3</text></g><g><title>b2-&gt;b3</title>\r\n<path fill="none" stroke="#4f5cc8" d="M99,-215.697C99,-207.983 99,-198.712 99,-190.112"></path>\r\n<polygon fill="#4f5cc8" stroke="#4f5cc8" points="102.5,-190.104 99,-180.104 95.5001,-190.104 102.5,-190.104"></polygon></g><g><title>b4</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="99" cy="-90" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="99" y="-85.8" font-family="inherit" font-size="13.00">b4</text></g><g><title>b3-&gt;b4</title>\r\n<path fill="none" stroke="#4f5cc8" d="M99,-143.697C99,-135.983 99,-126.712 99,-118.112"></path>\r\n<polygon fill="#4f5cc8" stroke="#4f5cc8" points="102.5,-118.104 99,-108.104 95.5001,-118.104 102.5,-118.104"></polygon></g><g><title>b4-&gt;a7</title>\r\n<path fill="none" stroke="#4f5cc8" d="M84.4297,-74.8345C74.2501,-64.9376 60.4761,-51.5462 48.9694,-40.3591"></path>\r\n<polygon fill="#4f5cc8" stroke="#4f5cc8" points="51.4055,-37.8461 41.7957,-33.3847 46.5259,-42.865 51.4055,-37.8461"></polygon></g><g><title>c2</title>\r\n<ellipse fill="lightgrey" stroke="lightgrey" cx="171" cy="-162" rx="27" ry="18"></ellipse>\r\n<text text-anchor="middle" x="171" y="-157.8" font-family="inherit" font-size="13.00">c2</text></g><g><title>c1-&gt;c2</title>\r\n<path fill="none" stroke="#2e7d32" d="M171,-215.697C171,-207.983 171,-198.712 171,-190.112"></path>\r\n<polygon fill="#2e7d32" stroke="#2e7d32" points="174.5,-190.104 171,-180.104 167.5,-190.104 174.5,-190.104"></polygon></g><g><title>c2-&gt;b4</title>\r\n<path fill="none" stroke="#2e7d32" d="M156.43,-146.834C146.25,-136.938 132.476,-123.546 120.969,-112.359"></path>\r\n<polygon fill="#2e7d32" stroke="#2e7d32" points="123.405,-109.846 113.796,-105.385 118.526,-114.865 123.405,-109.846"></polygon></g></g>\r\n</svg>\r\n\r\nAhora que tenemos una idea de lo que son las ramas pasemos al manejo de ellas. Para crear una rama usamos `git branch <nombre de la rama>`, esto creará un indicador llamado `HEAD` que apuntará a la rama en la que estamos para ubicarnos mejor, en este caso aún seguiríamos en la rama *master*. Para cambiar de ramas usamos `git switch <nombre de la rama>` o `git checkout <nombre de la rama>`, esto moverá el apuntador `HEAD` a la nueva línea en la que estaremos trabajando.\r\n\r\nEn algún punto las ramas pueden volver a unirse a la rama principal o a otra rama, como se muestra en la gráfica anterior. Todo lo que tienes que hacer es ir a la rama donde se van a hacer los cambios y usar `git merge <nombre de rama>`. Git creará una nueva *snapshot* de los cambios y un nuevo *commit* de referencia especial porque tendrá dos ancestros directos.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">checkout master</span>\r\nSwitched to branch <span class="green">\'master\'</span>\r\n<span class="purple">git</span> <span class="blue">merge &lt;nombre de rama&gt;</span>\r\nMerge made by the <span class="green">\'recursive\'</span> strategy.\r\nindex.js | 1 <span class="green">+</span>\r\n1 file changed, 1 insertion(<span class="green">+</span>)\r\ncreate mode 100644 index.js</code></pre>\r\n\r\nNo todo es tan bonito siempre. Al momento de unir ramas, si cambias la misma parte del mismo archivo en las dos ramas que se han unido ocurrirá un conflicto, Git no podrá unirlas tan fácil, te indicará dónde está el conflicto y te pedirá que lo arregles.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">merge &lt;nombre de rama&gt;</span>\r\nAuto-merging index.js\r\n<span class="red">CONFLICT</span> (content): Merge conflict in index.js\r\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\r\n\r\nEsto de unir ramas se puede volver un caos y nosotros podemos saber el trabajo que conlleva, pero ¿se lo queremos presentar al público así?. Al final lo que la gente ve es el resultado final y si alguien quiere ver como lo hiciste puede que quieras mostrar algo más coherente.\r\n\r\nSe puede aplicar a lo que estás leyendo, duro tres días haciendo el artículo porque escojo el tema, investigo un poco, hago el borrador, creo las imágenes si las necesito, escojo los colores y reviso las faltas de ortografía. Lo primero que hice es hacer la gráfica de las ramas, pero si alguien ve el historial puede que no tenga sentido para nada.\r\n\r\nEl historial de commits es tal y lo que pasó, cambiar este historial sería cambiar el historial de cómo el proyecto fue construido. Los errores son parte de la historia del proyecto y son necesarias incluso para estudiar las soluciones.\r\n\r\nEl uso de `git rebase` puede ir en contra de esto porque coloca la base de una rama de un commit a otra rama diferente, pero en algunos casos puede ser útil, simplemente porque tal vez no quieras tener una rama completa para un cambio tan pequeño. Una vez ya acabado el trabajo de unir ambas ramas se puede eliminar la rama porque ahora está apuntando a la rama principal, por lo que ya no sería necesaria. Para eliminar ramas se hace con `git branch -d <nombre de rama>`.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">checkout &lt;nombre de rama&gt;</span>\r\n<span class="purple">git</span> <span class="blue">rebase master</span>\r\nSuccessfully rebased and updated refs/heads/&lt;nombre de rama&gt;.\r\n\r\n<span class="purple">git</span> <span class="blue">checkout master</span>\r\n<span class="purple">git</span> <span class="blue">merge &lt;nombre de rama&gt;</span>\r\n<span class="purple">git</span> <span class="blue">branch -d &lt;nombre de rama&gt;</span>\r\n</code></pre>\r\n\r\n## Repositorio Remoto\r\n\r\nTodo lo que hemos estado trabajando es sobre el repositorio local de nuestro proyecto. Para que otras personas lo vean y colaboren con él, podemos usar los servicios remotos como GitHub, Bitbucket y GitLab; son servicios que permiten la gestión de proyectos y el seguimiento de trabajo con otros desarrolladores.\r\n\r\nPara subir un repositorio local a uno remoto, tendremos que crear un repositorio en algunos de los servicios en el cual obtendremos una *url* del nuestro proyecto, con la que podremos utilizar `git remote add <nombre indentificador> <url>`\r\n\r\nOtra forma de obtener un repositorio es **clonar un repositorio remoto** con `git clone <url> <nombre>`. Con esto ya tendremos en nuestro directorio local una copia con la que podremos contribuir al proyecto o simplemente experimentar con su funcionamiento.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">clone</span> <span class="lightblue">https://github.com/MarcoMadera/Blog.git</span> <span class="blue">GitPost</span>\r\nCloning into <span class="green">\'GitPost\'</span>...\r\nremote: Enumerating objects: <span class="darkyellow">64</span>, done.\r\nremote: Counting objects: <span class="darkyellow">100%</span> (<span class="darkyellow">64</span>/<span class="darkyellow">64</span>)</span>, done.\r\nremote: Compressing objects: <span class="darkyellow">100%</span> (<span class="darkyellow">45</span>/<span class="darkyellow">45</span>), done.\r\nremote: Total <span class="darkyellow">64</span> (delta <span class="darkyellow">32</span>), reused <span class="darkyellow">45</span> (delta <span class="darkyellow">17</span>)</span>, pack-reused <span class="darkyellow">0</span>\r\nUnpacking objects: <span class="darkyellow">100%</span> (<span class="darkyellow">64</span>/<span class="darkyellow">64</span>), <span class="darkyellow">74.53 KiB</span> | <span class="darkyellow">19.00 KiB/s</span>, done.</code></pre>\r\n\r\nDespués de usar `git clone`, si usamos `git remote` veremos que tendremos *origin*, este es el nombre para identificar la *url* que Git le pone por defecto a los proyectos obtenidos por `git clone`. Esto sucede al igual que al inicializar un proyecto, Git por defecto crea la rama con nombre *master*. Se puede **renombrar el identificador** con el comando `git remote rename <origin en este caso> <nuevo nombre>`\r\n\r\nAhora que tenemos un repositorio remoto, puede que el contenido del remoto sea diferente por cambios de otros colaboradores. En nuestro repositorio local no se verán reflejados esos cambios. Para actualizar nuestro repositorio local podemos usar `git pull`. Trae los cambios generalmente del servidor al que se clonó y hace un `merge` automático en nuestro repositorio local. Para indicar otro servicio remoto y rama se usa `git pull <remoto> <rama>`\r\n\r\nCuando ya hemos hecho commit de los cambios que queremos compartir en nuestro repositorio, para actualizar el repositorio remoto usamos `git push <remoto> <rama>`, si alguien ya hizo un `git push` antes, nuestros cambios serán rechazados por lo que siempre es bueno hacer `git pull` antes.\r\n\r\n## Comandos de Git adicionales\r\n\r\nSi no quieres escribir el comando completo cada vez, puedes fácilmente configurar un *alias* para cada comando. Los *alias* en Git nos permiten **crear *shortcuts***, a través de `git config --global alias.<atajo> comando`.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">config --global alias.&lt;atajo&gt; <span class="green">"&lt;comando&gt;"</span></span>\r\n<span class="purple">git</span> <span class="blue">config --global alias.st <span class="green">"status"</span></span>\r\n<span class="purple">git</span> <span class="blue">git config --global alias.slog <span class="green">"log --pretty=format:\'%h | %cn | %cr | %s\'"</span></span>\r\n</code></pre>\r\n\r\nSi ya hicimos commit y olvidamos **añadir un archivo o enmendar algún cambio** podemos hacerlo con el comando `git commit --amend`. Igualmente si nos equivocamos en la descripción de nuestro commit lo podemos arreglar con el mismo comando si lo invocamos inmediatamente después de haber ocurrido el error.\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">commit -m <span class="green">"&lt;mensaje&gt;"</span></span>\r\n<span class="purple">git</span> <span class="blue">add &lt;archivo&gt;</span>\r\n<span class="purple">git</span> <span class="blue">git commit --amend</span>\r\n</code></pre>\r\n\r\nGit mantiene un *log* de dónde el `HEAD` y sus referencias han estado. Lo podemos ver con el comando `git reflog` y mostrar más al respecto con `git show HEAD@{<número o referencia en días>}`\r\n\r\n<pre><code data-lang="CLI"><span class="purple">git</span> <span class="blue">reflog</span>\r\n<span class="yellow">2673d2d (<span class="lightblue">HEAD -></span> <span class="green">master</span>, <span class="red">origin/master</span>)</span> HEAD@{0}: merge newbranch: Merge made by the <span class="green">\'recursive\'</span> strategy.\r\n<span class="yellow">4e85459</span> HEAD@{1}: checkout: moving from master to master\r\n<span class="yellow">4e85459</span> HEAD@{2}: commit: hola mundo\r\n<span class="yellow">8c821a7</span> HEAD@{3}: checkout: moving from newbranch to master\r\n\r\n<span class="purple">git</span> <span class="blue">show HEAD@{2}</span>\r\n<span class="yellow">commit ed3946555db4597294bae2014cfe996b88268bef</span>\r\nAuthor: MarcoMadera &lt;example@email.com&gt;\r\nDate:   Mon Jul 6 17:09:50 2020 -0500\r\n\r\n    hola mundo\r\n\r\ndiff <span class="blue">--git</span> <span class="lightblue">a/index.js b/index.js</span>\r\nindex 5e1c309..ade1f58 100644\r\n<span class="red">---</span> <span class="lightblue">a/index.js</span>\r\n<span class="green">+++</span> <span class="lightblue">b/index.js</span>\r\n@@ <span class="red">-</span>1 <span class="green">+</span>1 @@\r\n<span class="red">-</span>Hello World\r\n<span class="green">+</span>Hola Mundo\r\n</code></pre>\r\n\r\nPara **crear una rama y cambiar directamente** se usa el comando `git checkout -b <nombre de rama>` o `git switch -c <nombre de rama>`. Ahora si quieres volver a la rama anterior se puede usar `git switch -`.\r\n\r\nPara **cambiar el nombre de una rama** se usa `git branch --move <rama> <nuevo nombre>`. Para enviar los cambios al repositorio remoto `git push --set-upstream <remoto> <nuevo nombre>`. Para eliminar la rama anterior del repositorio remoto utilizamos `git push origin -d <rama>`.\r\n\r\nCuando estamos trabajando, pero queremos cambiar de rama y no hacer un commit de un trabajo incompleto, usamos `git stash`. Guarda los commits en un estado diferente para poder recuperarlo después con `git stash apply`.\r\n\r\nGit tiene una **interfaz gráfica integrada** que podemos utilizar con el comando `gitk` para ver el historial y `git-gui` donde puedes preparar los commits y experimentar lo visto.\r\n\r\n## Conclusión\r\n\r\nGit nos proporciona una manera elegante de hacer el seguimiento de versiones, nos permite hacer un resguardo y hacer posible la colaboración entre varias personas teniendo espacios de trabajo separados como el local y el remoto. Git también se puede implementar en interfaces gráficas y tiene muchos comandos que no se han tocado en este artículo a fondo, por lo que te invito a investigar más sobre el tema.\r\n'},{id:9,title:"Tipos y objetos en JavaScript",author:"Marco Madera",cover:{original:"https://res.cloudinary.com/marcomadera/image/upload/v1611100833/Blog/tipos-y-objetos-en-javascript/Js_ul0yih.png",w120:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,h_120,w_120/v1611100833/Blog/tipos-y-objetos-en-javascript/Js_ul0yih.png",w300:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_300/v1611100833/Blog/tipos-y-objetos-en-javascript/Js_ul0yih.png",w760:"https://res.cloudinary.com/marcomadera/image/upload/c_scale,w_760/v1611100833/Blog/tipos-y-objetos-en-javascript/Js_ul0yih.png"},coverDescription:"JavaScript Logo",excerpt:"CSS es el lenguaje que se usa para dar estilos a un documento escrito en lenguaje marcado. Con él podemos controlar los elementos en aspecto, posición y más.",date:new Date("Jan 27 2020"),tags:["JavaScript"],src:'# Tipos y objetos en JavaScript\r\n\r\nEn JavaScript tenemos varios tipos de datos; *booleanos*, numéricos, los de texto o *string*, el null que indica que una variable no tiene un valor, *undefined* que indica que una variable está declarada en memoria, pero su valor aún no ha sido definido y el *symbol*, el cual fue introducido en la definición de EcmaScript 6. A partir de aquí todo lo demás son objetos, como son los arreglos o *arrays*, las fechas o incluso objetos que tú mismo declares.\r\n\r\n## Diferencias entre valores primitivos y objetos\r\n\r\n1. Los valores primitivos son inmutables.\r\n2. No se pueden declarar propiedades a valores primitivos.\r\n3. Los objetos se manejan por referencias por lo que dos objetos diferentes que tengan los mismos valores no serán iguales.\r\n\r\nPara entender esto veamos el siguiente ejemplo:\r\n\r\n```javascript\r\nlet str = "yay";\r\nconsole.log(str[0]); // "y"\r\nconsole.log(str.length); // 3\r\n\r\nstr[0] = "p";\r\nconsole.log(str);\r\n```\r\n\r\nAnalizando el código anterior ¿Cuál será el segundo resultado de la consola? De una el resultado sigue siendo `"yay"`, pero ¿Por qué pasa esto?\r\n\r\nPrimero tenemos que entender que los *strings* son valores primitivos y como se ha mencionado los valores primitivos son inmutables, o sea que no se pueden modificar. Cuando se intenta acceder a una propiedad de un valor primitivo como en el caso de `str[0]`, **JavaScript envuelve el valor en un objeto**.\r\n\r\nLo anterior puede resultar un poco confuso, pero veamos cómo sería el código enfocándonos cuando JavaScript envuelve los valores primitivos en un nuevo objeto para que tenga sentido la acción que le damos a realizar.\r\n\r\n```javascript\r\nlet str = "yay";\r\nconsole.log(new String(str)[0]); // "y"\r\nconsole.log(new String(str).length); // 3\r\n\r\nnew String(str)[0] = "p";\r\nconsole.log(str);\r\n```\r\n\r\n1. Se define una variable `str` de valor primitivo *string*.\r\n2. Se intenta acceder al *key* 0 de la variable `str`, como no es posible declarar propiedades a valores primitivos JavaScript lo envuelve en un objeto de tipo *string*, se accede al valor y lo imprime dando resultado `y`.\r\n3. Hace lo mismo del paso anterior, pero accede a la propiedad `length`.\r\n4. Se crea otro objeto de la variable `str` donde la key 0 es igual a `p`. Es como escribir 1+1 en medio de una ejecución.\r\n5. Imprime la variable str que es igual a `yay`.\r\n\r\nCuando comparamos objetos, estos se comparan por referencia. ¿Esto qué significa? Cada objeto, a pesar de que puedan lucir similares o iguales, ellos son diferentes, cada uno tiene su propia identidad. A la hora de comparar dos objetos vamos a obtener un valor negativo, ya que ellos no son iguales. A diferencia los valores primitivos, los cuales ellos no tienen su propia identidad, vamos a obtener un resultado positivo.\r\n\r\nUna forma simple de ver que los objetos tienen identificador propio está en palabra *new*, lo veo como algo que cada vez que se invoca es algo nuevo distinto a lo demás y algo simple de comprobar de una manera más visual es comparando los datos.\r\n\r\n```javascript\r\n10 === 10; // true\r\n"ave" === "ave"; // true\r\n// new Object() es equivalente a {}\r\n{} === {}; // false\r\n[] === []; // false\r\n```\r\n\r\n¿Qué significa que los objetos se comparan por referencia? Tomemos el siguiente ejemplo:\r\n\r\n```javascript\r\nlet obj = {};\r\nlet dos = obj;\r\nlet obj2 = {}\r\nobj === dos // true\r\nobj === obj2 // false\r\n```\r\n\r\nEl resultado al comparar `obj` y dos es *true* porque en este caso si es el mismo objeto porque apunta a la misma dirección de la memoria y `obj` con `obj2` es *false* porque ya no son el mismo objeto.\r\n\r\n<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 264.5 249.5" width="100%" height="250"><defs><style>@font-face{font-family:&quot;Virgil&quot;;src:url(&quot;https://excalidraw.com/FG_Virgil.woff2&quot;)}@font-face{font-family:&quot;Cascadia&quot;;src:url(&quot;https://excalidraw.com/Cascadia.woff2&quot;)}</style></defs><path d="M13.025 19.584c37.787-4.246 77.393-.904 102.93-1.912m-102.283.942c26.923-.09 54.455 1.033 103.299-1.012m-.77-1.07c.802 16.112.205 32.668-1.31 48.372m.676-47.588c-.015 16.232 1.366 31.827.582 47.286m-.404-.224c-39.08 1.17-76.427-1.996-103.187 2.434m104.52-2.397c-27.546.982-53.602 1.116-103.946-.1m-1.34-1.233c1.025-8.57.37-20.481 1.027-46.268m1.057 47.829c.077-14.43-.419-31.846-1.114-46.428M204.987 13.023c6.074-2.693 15.596-4.339 22.194-2.289 6.597 2.05 13.577 8.723 17.39 14.589 3.811 5.866 6.374 13.883 5.481 20.607-.892 6.724-5.409 15.241-10.838 19.736-5.428 4.495-14.538 7.161-21.733 7.233-7.196.071-15.794-2.713-21.44-6.805-5.646-4.093-11.1-11.2-12.436-17.748-1.336-6.548 1.037-15.423 4.42-21.538 3.383-6.116 12.865-12.441 15.88-15.154 3.013-2.712 1.441-1.01 2.204-1.122.763-.111 2.244-.198 2.373.456m9.92-1.357c6.87.352 15.779 5.27 20.901 9.704 5.123 4.435 9.203 10.317 9.835 16.904.632 6.587-2.458 16.636-6.045 22.618-3.586 5.983-8.722 11.39-15.473 13.277-6.752 1.886-18.547.679-25.037-1.96-6.491-2.64-10.953-7.869-13.908-13.875s-5.044-15.586-3.823-22.163c1.221-6.576 5.545-13.415 11.15-17.298 5.607-3.884 18.768-4.962 22.486-6.002 3.719-1.04-.278-.087-.174-.238.104-.15.953-.863.798-.664" stroke="#364fc7" fill="none"/><text x="22.5" y="32" font-family="Virgil, Segoe UI Emoji" font-size="28" fill="#0b7285" text-anchor="middle" style="white-space:pre" transform="translate(41 18)">Obj</text><text x="15" y="32" font-family="Virgil, Segoe UI Emoji" font-size="28" fill="#2b8a3e" text-anchor="middle" style="white-space:pre" transform="translate(203.5 19.5)">{}</text><path d="M9.177 102.613c42.523-1.39 80.814-1.37 104.49.546m-103.55-.024c34.62.754 69.173.644 102.592 1.293m-.446-2.778c-1.21 13.225.445 20.472 2.396 46.91m-2.08-44.613c.563 12.24.278 25.664-.514 46.36m-.04-1.117c-28.583 2.756-62.721.907-100.546-.048m101.226.603c-40.825.929-81.235 1.344-102.992 1.55m-.916-1.269c2.534-12.334 2.891-22.89 1.122-47.973m-.878 48.16c1.673-10.859 1.359-21.325 1.9-47.276" stroke="#364fc7" fill="none"/><text x="23.5" y="32" font-family="Virgil, Segoe UI Emoji" font-size="28" fill="#0b7285" text-anchor="middle" style="white-space:pre" transform="translate(38 105)">dos</text><path d="M113.12 126.66c6.946-.014 29.641 4.147 42.442.786 12.8-3.361 25.85-11.79 34.362-20.951 8.512-9.161 14.087-28.452 16.712-34.014m-91.515 52.955c6.848-.428 27.674 3.625 40.05.121 12.377-3.504 26.102-12.438 34.21-21.145 8.107-8.708 11.953-25.96 14.438-31.1M117.322 40.54c11.143-.011 55.188.002 66.107.11m-67.135-1.396c10.974.186 55.245 2.19 66.15 2.75" stroke="#087f5b" fill="none"/><path d="M178.692 37.785c-.026 1.214 1.353 4.661 1.716 5.695.363 1.034.253 1.42.46.507.207-.913.905-4.726.78-5.983-.124-1.256-1.257-1.235-1.528-1.556m.349.704c-.197 1.443-.416 6.757-.532 7.592-.117.835-.506-1.555-.167-2.582.34-1.026 2.335-2.641 2.203-3.577-.133-.936-2.345-1.974-2.998-2.037M202.219 73.984c.947.46 4.986 2.623 5.79 2.401.802-.222.252-3.333-.971-3.734-1.224-.4-5.548 1.119-6.371 1.329m.47-1.05c.76.645 5.375 5.05 6.19 4.67.815-.38-.156-6.528-1.298-6.95-1.142-.42-4.705 3.822-5.553 4.423" stroke="#087f5b" fill="none"/><path d="M205.138 71.75c-.201.009-1.316-.51-1.544-.13-.227.382.425 1.853.18 2.414-.246.56-1.416 1.058-1.652.952-.237-.107-.527-1.239.233-1.591.76-.352 3.58-.74 4.324-.522.744.217.18 2.272.14 1.827-.039-.444-.637-4.4-.375-4.496.262-.095 2.44 3.457 1.946 3.926-.493.468-4.235-.754-4.904-1.113-.668-.36.848-.782.893-1.042m-.364-1.402c-.378.218-1.176 1.674-1.32 2.386-.143.712.543 1.364.456 1.885-.088.52-.678 1.38-.98 1.238-.304-.142-1.754-1.37-.839-2.09.915-.719 5.366-2.181 6.328-2.226.962-.045-.7 2.343-.555 1.956.144-.386 1.406-4.213 1.42-4.276.013-.064-.539 3.285-1.34 3.893-.8.61-3.038-.175-3.463-.24-.425-.066.598.24.914-.152M180.49 38.192c.1.858 1.787 4.466 1.453 5.563-.334 1.098-2.888 1.426-3.46 1.02-.571-.404-.661-2.47.03-3.449.69-.98 3.567-2.078 4.113-2.429m-.466 1.485c-.005 1.076-.19 4.373-.933 4.782-.741.41-3.195-1.809-3.518-2.323-.323-.515.909-.164 1.582-.765s2.388-2.213 2.456-2.842" stroke="#087f5b" fill="none"/><path d="M11.987 189.18c32.44-1.536 69.977-.848 101.794 1.694m-103.294-.638c39.67-.558 79.518-.936 103.429-.206m1.745-1.568c-1.317 14.078-1.206 29.508.063 48.489m-1.256-47.324c-.715 13.547-.224 28.5-1.306 47.772m-.985-.413c-20.677.498-46.304-2.237-100.975.54m103.12-1.481c-39.419-.067-76.862.99-103.546 1.357m.941-1.43c-2.282-7.41.568-19.918-2.464-45.816m2.165 46.217c-1.419-11.605.425-23.76-.69-47.147" stroke="#364fc7" fill="none"/><text x="30" y="32" font-family="Virgil, Segoe UI Emoji" font-size="28" fill="#0b7285" text-anchor="middle" style="white-space:pre" transform="translate(32.5 188)">obj2</text><path d="M217.62 176.33c6.582-1.337 14.768 1.66 20.58 5.336 5.813 3.675 12.056 10.32 14.296 16.715s1.696 15.598-.857 21.656c-2.553 6.057-8.478 11.39-14.459 14.689-5.98 3.298-14.682 6.287-21.426 5.102-6.744-1.185-14.45-6.93-19.038-12.21-4.588-5.281-8.363-12.716-8.488-19.472-.125-6.757 3.05-15.971 7.737-21.067s16.272-7.663 20.383-9.508c4.111-1.844 2.813-1.492 4.285-1.56 1.473-.069 4.452.704 4.548 1.15m-16.383.787c6.178-2.501 16.06-2.7 23.067-.184 7.007 2.516 15.39 9.488 18.971 15.283 3.582 5.795 3.66 13.26 2.518 19.486-1.14 6.225-4.04 13.292-9.364 17.868-5.323 4.575-15.304 9.153-22.576 9.585-7.272.431-15.726-2.725-21.054-6.997-5.33-4.271-9.675-11.975-10.918-18.63-1.243-6.656.306-15.476 3.458-21.303 3.153-5.827 12.667-11.356 15.456-13.658 2.79-2.303.77.106 1.279-.159.509-.264 1.552-1.645 1.776-1.43" stroke="#364fc7" fill="none"/><text x="15" y="32" font-family="Virgil, Segoe UI Emoji" font-size="28" fill="#2b8a3e" text-anchor="middle" style="white-space:pre" transform="translate(206.5 186)">{}</text><path d="M114.905 212.57c12.144.038 60.483.377 72.256.24m-73.502-1.512c12.061-.259 60.521-.457 72.9-.187" stroke="#087f5b" fill="none"/><path d="M187.165 211.917c-.048-.772-1.244-3.877-.947-4.09.297-.213 2.378 2.1 2.731 2.813.353.711-.534.429-.614 1.458-.08 1.029.625 4.092.135 4.717-.491.625-2.719-.21-3.08-.968-.362-.757.909-2.994.91-3.575m-.244-1.444c-.232-.71-1.24-1.713-.934-2.08.306-.365 2.297-.778 2.772-.115.475.663.14 2.595.076 4.095-.064 1.5-.17 4.572-.462 4.905-.292.333-1.177-1.812-1.289-2.906-.111-1.094.414-3.238.62-3.658" stroke="#087f5b" fill="none"/></svg>\r\n\r\nEn caso de que queramos comparar el contenido de *arrays* u objetos es posible que lo que queramos usar sean los valores primitivos de *tuples* o *records*, valores que son primitivos que se añaden recientemente al lenguaje.\r\n\r\n```javascript\r\n#[] === #[] // true\r\n#{} === #{} // true\r\n```\r\n\r\n## Coerción de datos\r\n\r\nLa coerción sucede cuando tenemos que **convertir un valor de un tipo de dato a otro tipo de dato**. La coerción puede suceder en ciertos escenarios automáticamente debido a que JavaScript es un lenguaje débilmente tipado, por ejemplo:\r\n\r\n```javascript\r\ntrue + 5 // 6\r\n```\r\n\r\nAquí estamos sumando un número 2 con el valor `null` y estamos recibiendo un resultado `false`. ¿Por qué sucede esto? Bueno, sucede porque JavaScript está convirtiendo el valor `true` a 1 para darle sentido a esta operación. En este caso, el 2 nos retorna un `true` como *booleano* y el `null` como un `false`. Al no ser iguales recibimos un `false`.\r\n\r\n```javascript\r\n["abc"] + "abc" // abcabc\r\n```\r\n\r\nAquí estamos sumando un arreglo el cual tiene un elemento de una cadena de texto que es `abc` con una cadena de texto sin el arreglo, de esta suma recibimos un `abcabc`. JavaScript convierte el arreglo a un *string* automáticamente y al sumar ambas cadenas de texto se concatenan.\r\n\r\nLa **coerción numérica**, generalmente sucede cuando tú intentas hacer alguna operación matemática, por ejemplo, en este caso:\r\n\r\n```javascript\r\n50 / "5" // 10\r\n```\r\n\r\nAquí estamos dividiendo un número 50 entre un *string* que tiene un valor de 5. JavaScript convierte el *string* 5 a un número. Por lo tanto, recibimos un 10.\r\n\r\nLa **coerción de *strings*** generalmente sucede cuando se utiliza el operador de suma y alguno de los dos valores es un *string*. JavaScript asume se está intentando concatenar *strings*, entonces trata de convertir el otro elemento en *string* y los une, como puedes ver aquí.\r\n\r\n```javascript\r\n54 + "abc" // "54abc"\r\n54 + "" // "54"\r\n```\r\n\r\nLa **coerción de booleanos** sucede cuando se intenta, comparar o hacer alguna operación lógica.\r\n\r\n```javascript\r\n0 || 5 // 5\r\n```\r\n\r\nAquí tenemos un operador *OR*, básicamente está diciendo o 0 o 5, y estamos recibiendo 5. El 0 está siendo convertido a un valor `false` y 5 está siendo convertido a un valor `true`. El operador *OR* siempre se va a inclinar por el valor `true` y por eso recibimos un 5.\r\n\r\n## Igualdad de valores\r\n\r\nEn JavaScript existen los siguientes tipos de igualdad:\r\n\r\n|  Igualdad    |      Representación      |\r\n|--------------|--------------------------|\r\n|  Abstracta   | a == b (doble igual)   |\r\n|  Estricta    | a === b (triple iguales) |\r\n|  Mismo valor | Object.is(a, b)          |\r\n\r\nLa **igualdad abstracta** es confusa porque al igual que lo vimos en la [coerción de datos](#coercion-de-datos "Coerción de datos") JavaScript convierte los valores a un tipo que tenga sentido.\r\n\r\n```javascript\r\n["abc"] == "abc" // true\r\n```\r\n\r\nPara tener una idea más clara de todos los resultados dependiendo de la operación puedes ver la [Tabla de igualdad de JavaScript](https://dorey.github.io/JavaScript-Equality-Table/):\r\n\r\n![Tabla de igualdad de JavaScript](https://res.cloudinary.com/marcomadera/image/upload/f_auto,c_scale,w_500,h_481,dpr_auto/v1611100839/Blog/tipos-y-objetos-en-javascript/Coercion_dzxmpj.png "Tabla de igualdad de JavaScript")\r\n\r\nEs difícil aprenderse la tabla anterior por lo que hacer este tipo de igualdades puede causar algunos errores en nuestro programa o algunos comportamientos inesperados si olvidamos un dato. ¿Cómo la evitamos?. Lo recomendable es que se use el operador de **igualdad estricta**. Este operador evita que los valores se conviertan al compararlo uno con el otro.\r\n\r\n```javascript\r\n["abc"] === "abc" // false\r\n```\r\n\r\nPuedes ver que ya obtenemos un valor `false`, ya que este *array* no está siendo convertido en un *string*.\r\n\r\nLa **igualdad del mismo valor con** `Object.is()` es muy similar a la igualdad estricta, con dos casos especiales, *Not a Number* y la igualdad de cero y cero con signo negativo.\r\n\r\n```javascript\r\nNaN === NaN // false\r\nObject.is(NaN, NaN) // true\r\n\r\n-0 === 0 // true\r\nObject.is(-0, 0) // false\r\n0 === -0 // true\r\nObject.is(0, -0) // false\r\n```\r\n\r\n## Prototipos\r\n\r\nEn JavaScript todos los objetos tienen un prototipo. Lo podemos ver en la consola como `__proto__`, aquí podemos ver todas las funciones y argumentos que se pueden usar y al final de la lista puede que veamos de nuevo a `__proto__` hasta llegar al `__proto__: Object` porque todos los objetos de JavaScript heredan de este objeto creando la cadena de prototipos.\r\n\r\n![Prototipo](https://res.cloudinary.com/marcomadera/image/upload/f_auto,c_scale,w_260,h_176,dpr_auto/v1611104815/Blog/tipos-y-objetos-en-javascript/proto_uvgdvt.png)\r\n\r\nVentajas de los prototipos:\r\n\r\n- Todas las funciones o propiedades que declaremos dentro del prototipo van a ser heredadas por todas las instancias de esta clase.\r\n- Todas las instancias de esta clase van a apuntar al mismo prototipo por lo que podemos tener un sinfín de números de instancias, pero solamente un prototipo. Entonces no vamos a sobrecargar la memoria de la computadora.\r\n\r\nPara crear una clase se utiliza un objeto función donde se pueden agregan las propiedades y se declaran los métodos utilizando `prototype` en lugar de como se vio en la consola `__proto__`. Con esto ya se pueden llamar instancias de la clase.\r\n\r\n```javascript\r\nfunction Persona(edad){\r\n}\r\n//Declarar métodos\r\nPersona.prototype = {\r\n  permisos: function permisos(){ \r\n      console.log(`tengo ${this.edad} y ${this.edad < 18 ? "no" : "sí"} puedo votar`);\r\n  }\r\n}\r\nPersona.prototype.constructor = Persona;\r\n\r\nfunction Estudiante(nombre, edad){\r\n  Persona.call(this);\r\n  this.nombre = nombre;\r\n  this.edad = edad;\r\n}\r\n//Declarar métodos\r\nEstudiante.prototype = Object.create(Persona.prototype, {\r\n  decirNombre: {\r\n    value:  function decirNombre(){console.log("Mi nombre es",this.nombre)}\r\n  }\r\n});\r\nEstudiante.prototype.constructor = Estudiante;\r\n\r\n// Crear instacias de la clase\r\nlet estudiante = new Estudiante("Juanito",17);\r\nestudiante.decirNombre();\r\nestudiante.permisos();\r\n```\r\n\r\nDesde la especificación de ECMAScript 6 se introdujo la sintaxis de las clases. Es una transformación de la sintaxis de prototipos para hacer más cómoda la declaración de clases, *syntactic sugar* para prototipos.\r\n\r\n```javascript\r\nclass Persona {\r\n  //Declarar métodos\r\n  permisos(){ \r\n    console.log(`tengo ${this.edad} y ${this.edad < 18 ? "no" : "sí"} puedo votar`);\r\n  }\r\n}\r\n\r\nclass Estudiante extends Persona {\r\n  constructor(nombre, edad) {\r\n    super();\r\n    this.nombre = nombre;\r\n    this.edad = edad;\r\n  }\r\n  //Declarar métodos\r\n  decirNombre(){\r\n    console.log("Mi nombre es:", this.nombre);\r\n  }\r\n}\r\n\r\n// Crear instacias de la clase\r\nlet estudiante = new Estudiante("Marco", 17);\r\nestudiante.decirNombre();\r\nestudiante.permisos();\r\n```\r\n\r\nSe puede observar las similitudes a los prototipos, se declara la clase, dentro tiene el método constructor donde recibe las propiedades y se declaran los métodos. Ahora al ver la estructura del objeto vemos lo siguiente donde la izquierda es creada en forma de prototipo y la derecha en forma de clase.\r\n\r\n![Prototipos vs Classes](https://res.cloudinary.com/marcomadera/image/upload/f_auto,c_scale,w_630,h_267dpr_auto/v1611633447/Blog/tipos-y-objetos-en-javascript/Proto-vs-Classes_xdvwjy.png)\r\n\r\nSe puede observar que la diferencia es que en el constructor una es de tipo función y la otra dice `class`, pero al ver el tipo se puede ver que por detrás la clase es una función.\r\n\r\n## Conclusión\r\n\r\nHemos visto el comportamiento de los tipos primitivos y las características de los objetos de JavaScript. Los objetos están por todas partes y los revisamos por encima sin tocar métodos y otros detalles. También vimos la forma tradicional de crear clases y la que fue implementada con ES6.\r\n'}]}}]);